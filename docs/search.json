[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "spmodel Workshop",
    "section": "",
    "text": "Introduction\nHello üëã and welcome! The purpose of this site is to provide workshop materials for the spmodel workshop at the 2023 Spatial Statistics conference üåé. Slides that accompany this workshop can be found at INSERT LINK HERE.\nWhat is spmodel? The spmodel R package (Dumelle, Higham, and Ver Hoef 2023) can be used to fit, summarize, and predict for a variety of spatial statistical models. Some of the things that spmodel can do include:\nWhy use spmodel? There are many great spatial modeling packages in R. A few reasons to use spmodel for spatial analysis are that:\nThroughout the rest of these materials, we introduce spmodel through a few applied examples. We connect basic summary output with the spatial linear model for both point-referenced and areal (lattice) data. We discuss prediction and generalized linear spatial models for response variables whose distribution is not Gaussian. Along the way, we mention a few other advanced spmodel features.\nWorkshop Summary. The spmodel R package can be used to fit, summarize, and predict for a variety of spatial statistical models for both point-referenced and areal spatial data. What distinguishes spmodel from many other R packages for modeling spatial data is (1) a syntactic structure similar to the syntactic structure of base R functions lm() and glm() that makes spmodel relatively easy to learn, (2) the breadth of options that give the user a high amount of control over the model being fit, and (3) compatibility with other modern R packages like broom and sf. By the end of this workshop, participants can expect to be able to use spmodel to fit spatial linear models for point-referenced and areal (lattice) data, make predictions for unobserved spatial locations, fit anisotropic models for point-referenced data, fit spatial models with additional non-spatial random effects, fit generalized linear models for spatial data, and use big data methods to analyze large spatial data sets. More information on spmodel can be found on our website at https://usepa.github.io/spmodel/."
  },
  {
    "objectID": "index.html#author-introduction",
    "href": "index.html#author-introduction",
    "title": "spmodel Workshop",
    "section": "Author Introduction",
    "text": "Author Introduction\nMichael Dumelle is a statistician for the United States Environmental Protection Agency (USEPA). He works primarily on facilitating the survey design and analysis of USEPA‚Äôs National Aquatic Resource Surveys (NARS), which characterize the condition of waters across the United States. His primary research interests are in spatial statistics, survey design, environmental and ecological applications, and software development.\nMatt Higham is an assistant professor of statistics at St.¬†Lawrence University, a small liberal arts college in Canton, New York. His primary research interests are in spatial statistics and in applications of statistics to ecological settings. He enjoys using R to teach undergraduate students the foundations of statistical computing and data science.\nJay Ver Hoef is a senior scientist and statistician for the Marine Mammal Lab, part of the Alaska Fisheries Science Center of NOAA Fisheries, located in Seattle, Washington, although Jay lives in Fairbanks, Alaska. He is a fellow of the American Statistical Association, and Jay consults on a wide variety of topics related to marine mammals and stream networks. His main statistical interests are in spatial statistics and Bayesian statistics, especially applied to ecological and environmental data."
  },
  {
    "objectID": "index.html#set-up",
    "href": "index.html#set-up",
    "title": "spmodel Workshop",
    "section": "Set Up",
    "text": "Set Up\nThe packages that we use throughout this bundle include spmodel and ggplot2. To install and load them, run\n\n\n\n\ninstall.packages(\"spmodel\")\nlibrary(spmodel)\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)"
  },
  {
    "objectID": "index.html#citation-information",
    "href": "index.html#citation-information",
    "title": "spmodel Workshop",
    "section": "Citation Information",
    "text": "Citation Information\nIf you use spmodel in a formal report or publication, please cite it:\n\ncitation(package = \"spmodel\")\n\n\nTo cite spmodel in publications use:\n\n  Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical\n  modeling and prediction in R. PLOS ONE 18(3): e0282524.\n  https://doi.org/10.1371/journal.pone.0282524\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {{spmodel}: Spatial statistical modeling and prediction in {R}},\n    author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}},\n    journal = {PLOS ONE},\n    year = {2023},\n    volume = {18},\n    number = {3},\n    pages = {1--32},\n    doi = {10.1371/journal.pone.0282524},\n    url = {https://doi.org/10.1371/journal.pone.0282524},\n  }\n\n\nThe spmodel journal article associated with the citation is linked here."
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "spmodel Workshop",
    "section": "Disclaimer",
    "text": "Disclaimer\nThe views expressed in this manuscript are those of the authors and do not necessarily represent the views or policies of the U.S. Environmental Protection Agency or the U.S. National Oceanic and Atmospheric Administration. Any mention of trade names, products, or services does not imply an endorsement by the U.S. government, the U.S. Environmental Protection Agency, or the U.S. National Oceanic and Atmospheric Administration. The U.S. Environmental Protection Agency and the U.S. National Oceanic and Atmospheric Administration do not endorse any commercial products, services, or enterprises.\n\n\n\n\nDumelle, Michael, Matt Higham, and Jay M. Ver Hoef. 2023. ‚Äúspmodel: Spatial Statistical Modeling and Prediction in R.‚Äù PLOS ONE 18 (3): 1‚Äì32. https://doi.org/10.1371/journal.pone.0282524."
  },
  {
    "objectID": "basics.html#fit-a-spatial-linear-model",
    "href": "basics.html#fit-a-spatial-linear-model",
    "title": "1¬† The Basics",
    "section": "\n1.1 Fit a Spatial Linear Model",
    "text": "1.1 Fit a Spatial Linear Model\nA spatial linear model is a statistical linear model that incorporates spatial covariance among neighboring observations. Formally incorporating this spatial covariance generally yields models that more realistically represent spatial processes.\nThe sulfate data in spmodel contains data on 197 sulfate measurements in the conterminous United States. We visualize the sulfate measurements by running\n\nggplot(sulfate, aes(color = sulfate)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c(limits = c(0, 45)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure¬†1.1: Distribution of sulfate data.\n\n\n\nWe fit a spatial linear model with an intercept by running\n\nspmod &lt;- splm(sulfate ~ 1, data = sulfate, spcov_type = \"exponential\")\n\nThe summary of spmod contains several useful pieces of information we will discuss in more detail in Chapter¬†3:\n\nsummary(spmod)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = sulfate ~ 1, data = sulfate, spcov_type = \"exponential\")\n#&gt; \n#&gt; Residuals:\n#&gt;    Min     1Q Median     3Q    Max \n#&gt; -5.738 -2.605  4.900 13.323 38.099 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;             Estimate Std. Error z value Pr(&gt;|z|)\n#&gt; (Intercept)    5.924      6.529   0.907    0.364\n#&gt; \n#&gt; Coefficients (exponential spatial covariance):\n#&gt;        de        ie     range \n#&gt;      85.8      10.4 3105165.7"
  },
  {
    "objectID": "basics.html#meet-the-broom-functions-tidy-glance-and-augment",
    "href": "basics.html#meet-the-broom-functions-tidy-glance-and-augment",
    "title": "1¬† The Basics",
    "section": "\n1.2 Meet the broom functions: tidy(), glance(), and augment()\n",
    "text": "1.2 Meet the broom functions: tidy(), glance(), and augment()\n\nThe tidy(), glance(), and augment() functions popularized by the broom package (Robinson, Hayes, and Couch 2021) provide convenient tools for inspecting model fit. The tidy() function tidies the fixed effect model output into a tibble (i.e., a special data.frame()):\n\ntidy(spmod)\n#&gt; # A tibble: 1 √ó 5\n#&gt;   term        estimate std.error statistic p.value\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 (Intercept)     5.92      6.53     0.907   0.364\n\nThe glance() function glances at the model fit:\n\nglance(spmod)\n#&gt; # A tibble: 1 √ó 9\n#&gt;       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1   197     1     3 1140. 1146. 1146.  -570.     196.                0\n\nAnd the augment() function augments the data used to fit the model with diagnostics:\n\naugment(spmod)\n#&gt; Simple feature collection with 197 features and 6 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -2292550 ymin: 386181.1 xmax: 2173345 ymax: 3090370\n#&gt; Projected CRS: NAD83 / Conus Albers\n#&gt; # A tibble: 197 √ó 7\n#&gt;   sulfate .fitted .resid    .hat .cooksd .std.resid           geometry\n#&gt; *   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;        &lt;POINT [m]&gt;\n#&gt; 1   12.9     5.92   7.00 0.00334 1.61e-3     -0.694 (817738.8 1080571)\n#&gt; 2   20.2     5.92  14.2  0.00256 1.92e-3      0.865 (914593.6 1295545)\n#&gt; 3   16.8     5.92  10.9  0.00259 3.95e-4      0.390 (359574.1 1178228)\n#&gt; 4   16.2     5.92  10.3  0.00239 3.63e-4      0.390 (265331.9 1239089)\n#&gt; 5    7.86    5.92   1.93 0.00202 8.71e-3     -2.07  (304528.8 1453636)\n#&gt; 6   15.4     5.92   9.43 0.00201 2.40e-4      0.345 (162932.8 1451625)\n#&gt; # ‚Ñπ 191 more rows"
  },
  {
    "objectID": "basics.html#prediction",
    "href": "basics.html#prediction",
    "title": "1¬† The Basics",
    "section": "\n1.3 Prediction",
    "text": "1.3 Prediction\nThe sulfate_preds data in spmodel contains 100 locations at which to predict sulfate. We obtain these predictions by running\n\npredict(spmod, newdata = sulfate_preds)\n\nThe augment() function can also be used to augment prediction data with predictions:\n\naug_preds &lt;- augment(spmod, newdata = sulfate_preds)\nprint(aug_preds)\n#&gt; Simple feature collection with 100 features and 1 field\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173\n#&gt; Projected CRS: NAD83 / Conus Albers\n#&gt; # A tibble: 100 √ó 2\n#&gt;   .fitted            geometry\n#&gt; *   &lt;dbl&gt;         &lt;POINT [m]&gt;\n#&gt; 1    1.62  (-1771413 1752976)\n#&gt; 2   24.4    (1018112 1867127)\n#&gt; 3    8.95 (-291256.8 1553212)\n#&gt; 4   16.5    (1274293 1267835)\n#&gt; 5    4.93 (-547437.6 1638825)\n#&gt; 6   26.8    (1445080 1981278)\n#&gt; # ‚Ñπ 94 more rows\n\nThese predictions are then readily visualized:\n\nggplot(aug_preds, aes(color = .fitted)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c(limits = c(0, 45)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure¬†1.2: Sulfate predictions at several unobserved locations.\n\n\n\nThey follow a similar pattern as the observed data.\n\n\n\n\n\n\nExercise\n\n\n\nVisit spmodel's website at https://usepa.github.io/spmodel. Navigate to the ‚ÄúReferences‚Äù tab and explore some other functions available in spmodel."
  },
  {
    "objectID": "basics.html#r-code-appendix",
    "href": "basics.html#r-code-appendix",
    "title": "1¬† The Basics",
    "section": "\n1.4 R Code Appendix",
    "text": "1.4 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nggplot(sulfate, aes(color = sulfate)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c(limits = c(0, 45)) +\n  theme_gray(base_size = 14)\nspmod &lt;- splm(sulfate ~ 1, data = sulfate, spcov_type = \"exponential\")\nsummary(spmod)\ntidy(spmod)\nglance(spmod)\naugment(spmod)\npredict(spmod, newdata = sulfate_preds)\naug_preds &lt;- augment(spmod, newdata = sulfate_preds)\nprint(aug_preds)\nggplot(aug_preds, aes(color = .fitted)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c(limits = c(0, 45)) +\n  theme_gray(base_size = 14)\n\n\n\n\n\nRobinson, David, Alex Hayes, and Simon Couch. 2021. Broom: Convert Statistical Objects into Tidy Tibbles. https://CRAN.R-project.org/package=broom."
  },
  {
    "objectID": "spatial-linear-model.html#introducing-the-spatial-linear-model",
    "href": "spatial-linear-model.html#introducing-the-spatial-linear-model",
    "title": "2¬† The Spatial Linear Model",
    "section": "2.1 Introducing the Spatial Linear Model",
    "text": "2.1 Introducing the Spatial Linear Model\nStatistical linear models are often parameterized as\n\\[\n\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon},\n\\tag{2.1}\\]\nwhere for a sample size \\(n\\), \\(\\mathbf{y}\\) is an \\(n \\times 1\\) column vector of response variables, \\(\\mathbf{X}\\) is an \\(n \\times p\\) design (model) matrix of explanatory variables, \\(\\boldsymbol{\\beta}\\) is a \\(p \\times 1\\) column vector of fixed effects controlling the impact of \\(\\mathbf{X}\\) on \\(\\mathbf{y}\\), and \\(\\boldsymbol{\\epsilon}\\) is an \\(n \\times 1\\) column vector of random errors. We typically assume that \\(\\text{E}(\\boldsymbol{\\epsilon}) = \\mathbf{0}\\) and \\(\\text{Cov}(\\boldsymbol{\\epsilon}) = \\sigma^2_\\epsilon \\mathbf{I}\\), where \\(\\text{E}(\\cdot)\\) denotes expectation, \\(\\text{Cov}(\\cdot)\\) denotes covariance, \\(\\sigma^2_\\epsilon\\) denotes a variance parameter, and \\(\\mathbf{I}\\) denotes the identity matrix.\nTo accommodate spatial dependence in \\(\\mathbf{y}\\), an \\(n \\times 1\\) spatial random effect, \\(\\boldsymbol{\\tau}\\), is added to Equation¬†2.1, yielding the model\n\\[\n\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon},\n\\tag{2.2}\\]\nwhere \\(\\boldsymbol{\\tau}\\) is independent of \\(\\boldsymbol{\\epsilon}\\), \\(\\text{E}(\\boldsymbol{\\tau}) = \\mathbf{0}\\), \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_\\tau \\mathbf{R}\\), and \\(\\mathbf{R}\\) is a matrix that determines the spatial dependence structure in \\(\\mathbf{y}\\) and depends on a range parameter, \\(\\phi\\), which controls the behavior of the spatial covariance as a function of distance. We discuss \\(\\mathbf{R}\\) in more detail shortly. The parameter \\(\\sigma^2_\\tau\\) is called the spatially dependent random error variance or partial sill. The parameter \\(\\sigma^2_\\epsilon\\) is called the spatially independent random error variance or nugget. These two variance parameters are henceforth more intuitively written as \\(\\sigma^2_{de}\\) and \\(\\sigma^2_{ie}\\), respectively. The covariance of \\(\\mathbf{y}\\) is denoted \\(\\boldsymbol{\\Sigma}\\) and given by \\(\\sigma^2_{de} \\mathbf{R} + \\sigma^2_{ie} \\mathbf{I}\\). The parameters that compose this covariance are contained in the vector \\(\\boldsymbol{\\theta}\\), which is called the covariance parameter vector.\nEquation¬†2.2 is called the spatial linear model. The spatial linear model applies to both point-referenced and areal (i.e., lattice) data. Spatial data are point-referenced when the elements in \\(\\mathbf{y}\\) are observed at point-locations indexed by x-coordinates and y-coordinates on a spatially continuous surface with an infinite number of locations. For example, consider sampling soil at any point-location in a field. Spatial data are areal when the elements in \\(\\mathbf{y}\\) are observed as part of a finite network of polygons whose connections are indexed by a neighborhood structure. For example, the polygons may represent states in a country who are neighbors if they share at least one boundary."
  },
  {
    "objectID": "spatial-linear-model.html#modeling-covariance-in-the-spatial-linear-model",
    "href": "spatial-linear-model.html#modeling-covariance-in-the-spatial-linear-model",
    "title": "2¬† The Spatial Linear Model",
    "section": "2.2 Modeling Covariance in the Spatial Linear Model",
    "text": "2.2 Modeling Covariance in the Spatial Linear Model\nA primary way in which the model in Equation¬†2.2 differs for point-referenced and areal data is the way in which \\(\\mathbf{R}\\) in \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_{de} \\mathbf{R}\\) is modeled. For point-referenced data, the \\(\\mathbf{R}\\) matrix is generally constructed using the Euclidean distance between spatial locations. For example, the exponential spatial covariance function generates an \\(\\mathbf{R}\\) matrix given by\n\\[\n\\mathbf{R} = \\exp(-\\mathbf{H} / \\phi),\n\\tag{2.3}\\]\nwhere \\(\\mathbf{H}\\) is a matrix of Euclidean distances among observations and \\(\\phi\\) is the range parameter. Some spatial covariance functions have an extra parameter ‚Äì one example is the Mat√©rn covariance. Spatial models for point-referenced data are fit in spmodel using the splm() function.\nOn the other hand, \\(\\mathbf{R}\\) for areal data is often constructed from how the areal polygons are oriented in space. Commonly, a neighborhood structure is used to construct \\(\\mathbf{R}\\), where two observations are considered to be ‚Äúneighbors‚Äù if they share a common boundary. In the simultaneous auto-regressive (SAR) model,\n\\[\n\\mathbf{R} = [(\\mathbf{I} - \\phi \\mathbf{W}) (\\mathbf{I} - \\phi \\mathbf{W}^\\top)]^{-1}\n\\tag{2.4}\\]\nwhere \\(\\mathbf{I}\\) is the identity matrix and \\(\\mathbf{W}\\) is a weight matrix that describes the neighborhood structure among observations. A popular neighborhood structure is queen contiguity, in which two polygons are neighbors if they share a boundary. It is important to clarify that observations are not considered neighbors with themselves. Spatial models for areal data are fit in spmodel using the spautor() function.\n\n\n\n\n\n\nExercise\n\n\n\nNavigate to the Help file for splm by running ?splm or by visiting this link and scroll down to ‚ÄúDetails.‚Äù Examine the spatial linear model description in the Help file and relate some of the syntax used to the syntax in Equation¬†2.2 and Equation¬†2.3.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe form of the spatial linear model (\\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\)) is the same in the Help file as the form in Equation Equation¬†2.2. In the help file, \\(de\\) refers to \\(\\sigma^2_{de}\\), \\(ie\\) refers to \\(\\sigma^2_{ie}\\), and \\(range\\) refers to \\(\\phi\\). Finally, in the help file \\(h\\) refers to distance between observations while, in Equation¬†2.3, \\(\\mathbf{H}\\) refers to a matrix of these distances for all pairs of observations."
  },
  {
    "objectID": "model-fitting.html#data-introduction",
    "href": "model-fitting.html#data-introduction",
    "title": "3¬† Model Fitting",
    "section": "\n3.1 Data Introduction",
    "text": "3.1 Data Introduction\nThe moss data in the spmodel package is an sf (simple features) object (Pebesma 2018) that contains observations on heavy metals in mosses near a mining road in Alaska. An sf object is a special data.frame built for storing spatial information and contains a column called geometry. We can view the first few rows of moss by running\n\nmoss\n#&gt; Simple feature collection with 365 features and 7 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 365 √ó 8\n#&gt;   sample field_dup lab_rep year  sideroad log_dist2road log_Zn\n#&gt;   &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt;   &lt;fct&gt; &lt;fct&gt;            &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 001PR  1         1       2001  N                 2.68   7.33\n#&gt; 2 001PR  1         2       2001  N                 2.68   7.38\n#&gt; 3 002PR  1         1       2001  N                 2.54   7.58\n#&gt; 4 003PR  1         1       2001  N                 2.97   7.63\n#&gt; 5 004PR  1         1       2001  N                 2.72   7.26\n#&gt; 6 005PR  1         1       2001  N                 2.76   7.65\n#&gt; # ‚Ñπ 359 more rows\n#&gt; # ‚Ñπ 1 more variable: geometry &lt;POINT [m]&gt;\n\nMore information about moss can be found by running help(\"moss\", \"spmodel\").\nOur goal is to model the distribution of log zinc concentration (log_Zn) using a spatial linear model. We can visualize the distribution of log zinc concentration (log_Zn) in moss by running\n\nggplot(moss, aes(color = log_Zn)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c() +\n  scale_x_continuous(breaks = seq(-163, -164, length.out = 2)) +\n  theme_gray(base_size = 14)\n\n\n\nDistribution of log zinc concentration in the moss data.\n\n\n\nAn important predictor variable may be the log of the distance to the haul road, log_dist2road, which is measured in meters. Next we use spmodel to fit a spatial linear model with with log_Zn as the response and log_dist2road as a predictor."
  },
  {
    "objectID": "model-fitting.html#splm-syntax-and-output-interpretation",
    "href": "model-fitting.html#splm-syntax-and-output-interpretation",
    "title": "3¬† Model Fitting",
    "section": "\n3.2 splm() Syntax and Output Interpretation",
    "text": "3.2 splm() Syntax and Output Interpretation\nThe splm() function shares similar syntactic structure with the lm() function used to fit linear models without spatial dependence (Equation¬†2.1). splm() generally requires at least three arguments\n\n\nformula: a formula that describes the relationship between the response variable (\\(\\mathbf{y}\\)) and explanatory variables (\\(\\mathbf{X}\\))\n\n\nformula in splm() is the same as formula in lm()\n\n\n\n\ndata: a data.frame or sf object that contains the response variable, explanatory variables, and spatial information.\n\nspcov_type: the spatial covariance type (\"exponential\", \"matern\", \"spherical\", etc)\n\nThere are 17 different types\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf data is an sf object, then spatial information is stored in the object‚Äôs geometry. However, if data is a data.frame or tibble (a special data.frame), then the names of the variables that represent the x-coordinates and y-coordinates must also be provided as two additional arguments via xcoord and ycoord.\n\n\nWe fit a spatial linear model regressing log zinc concentration (log_Zn) on log distance to a haul road (log_dist2road) using an exponential spatial covariance function by running\n\nspmod &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"exponential\")\n\n\n\n\n\n\n\nTip\n\n\n\nThe estimation method in splm() is specified by estmethod. The default estimation method is restricted maximum likelihood (\"reml\"). Additional options include maximum likelihood \"ml\", semivariogram-based composite likelihood (\"sv-cl\") (Curriero and Lele 1999), and semivariogram-based weighted least squares (\"sv-wls\") (Cressie 1985). When the estimation method is semivariogram-based weighted least squares, the weights are specified by weights with a default of Cressie weights (‚Äúcressie\").\n\n\nWe summarize the model fit by running\n\nsummary(spmod)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\")\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -2.6801 -1.3606 -0.8103 -0.2485  1.1298 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;               Estimate Std. Error z value Pr(&gt;|z|)    \n#&gt; (Intercept)    9.76825    0.25216   38.74   &lt;2e-16 ***\n#&gt; log_dist2road -0.56287    0.02013  -27.96   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Pseudo R-squared: 0.683\n#&gt; \n#&gt; Coefficients (exponential spatial covariance):\n#&gt;        de        ie     range \n#&gt; 3.595e-01 7.897e-02 8.237e+03\n\nThe fixed effects coefficient table contains estimates, standard errors, z-statistics, and asymptotic p-values for each fixed effect. From this table, we notice there is evidence that mean log zinc concentration significantly decreases with distance from the haul road (p-value &lt; 2e-16).\nWe can relate some of the components in the summary output to the model in Equation¬†2.2:\n\nThe values in the Estimate column of the Coefficients (fixed) table form \\(\\boldsymbol{\\hat{\\beta}}\\), an estimate of \\(\\boldsymbol{\\beta}\\).\nThe de value of 0.36 in the Coefficients (exponential spatial covariance) table is \\(\\hat{\\sigma}^2_{de}\\), which is an estimate of \\(\\sigma^2_{de}\\), the variance of \\(\\boldsymbol{\\tau}\\) (commonly called the partial sill).\nThe ie value of 0.079 in the Coefficients (exponential spatial covariance) table is \\(\\hat{\\sigma}^2_{ie}\\), which is an estimate of \\(\\sigma^2_{ie}\\), the variance of \\(\\boldsymbol{\\epsilon}\\) (commonly called the nugget).\nThe range value of 8,237 in the Coefficients (exponential spatial covariance) table is \\(\\hat{\\phi}\\), which is an estimate of \\(\\phi\\) (recall \\(\\phi\\) is the range parameter in Equation¬†2.3 that controls the behavior of the spatial covariance as a function of distance).\n\nThe summary() output, while useful, is printed to the R console and not easy to manipulate. The tidy() function turns the coefficient table into a tibble (i.e., a special data.frame) that is easy to manipulate. We tidy the fixed effects by running\n\ntidy(spmod)\n#&gt; # A tibble: 2 √ó 5\n#&gt;   term          estimate std.error statistic p.value\n#&gt;   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 (Intercept)      9.77     0.252       38.7       0\n#&gt; 2 log_dist2road   -0.563    0.0201     -28.0       0\n\nWe tidy the spatial covariance parameters by running\n\ntidy(spmod, effects = \"spcov\")\n#&gt; # A tibble: 3 √ó 3\n#&gt;   term   estimate is_known\n#&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;lgl&gt;   \n#&gt; 1 de       0.360  FALSE   \n#&gt; 2 ie       0.0790 FALSE   \n#&gt; 3 range 8237.     FALSE\n\nThe is_known column indicates whether the parameter is assumed known. By default, all parameters are assumed unknown. We discuss this more in Chapter¬†5.\n\n\n\n\n\n\nExercise\n\n\n\nAnother data set contained within the spmodel package is the caribou data set. Read about the caribou data with ?caribou. Then, fit a spatial linear model with\n\n\nz as the response and tarp, water, and the interaction between tarp and water as predictors\na spatial covariance model for the errors of your choosing. You can examine the spatial covariance models available to use in the spcov_type argument of splm() in the Arguments section of ?splm.\n\nx as the xcoord and y as the ycoord (note that the xcoord and ycoord arguments now need to be specified because caribou is a data.frame object, not an sf object).\n\nAfter fitting the model, perform an analysis of variance using anova() to assess the importance of tarp, water, and tarp:water.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ncaribou_mod &lt;- splm(z ~ tarp + water + tarp:water,\n                    data = caribou, spcov_type = \"pexponential\",\n                    xcoord = x, ycoord = y)\nsummary(caribou_mod)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = z ~ tarp + water + tarp:water, data = caribou, \n#&gt;     spcov_type = \"pexponential\", xcoord = x, ycoord = y)\n#&gt; \n#&gt; Residuals:\n#&gt;      Min       1Q   Median       3Q      Max \n#&gt; -0.35291 -0.20863 -0.14249 -0.01117  0.38358 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;                  Estimate Std. Error z value Pr(&gt;|z|)    \n#&gt; (Intercept)       1.98991    3.69849   0.538 0.590555    \n#&gt; tarpnone          0.17267    0.10645   1.622 0.104790    \n#&gt; tarpshade         0.39551    0.10471   3.777 0.000159 ***\n#&gt; waterY            0.04751    0.10394   0.457 0.647570    \n#&gt; tarpnone:waterY  -0.18487    0.14778  -1.251 0.210919    \n#&gt; tarpshade:waterY -0.21760    0.14463  -1.505 0.132437    \n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Pseudo R-squared: 0.4559\n#&gt; \n#&gt; Coefficients (pexponential spatial covariance):\n#&gt;        de        ie     range     extra \n#&gt;   13.6922    0.0215 2257.4371    0.9125\nanova(caribou_mod)\n#&gt; Analysis of Variance Table\n#&gt; \n#&gt; Response: z\n#&gt;             Df    Chi2 Pr(&gt;Chi2)    \n#&gt; (Intercept)  1  0.2895 0.5905550    \n#&gt; tarp         2 14.4455 0.0007298 ***\n#&gt; water        1  0.2090 0.6475699    \n#&gt; tarp:water   2  2.5913 0.2737193    \n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\ntidy(anova(caribou_mod))\n#&gt; # A tibble: 4 √ó 4\n#&gt;   effects        df statistic  p.value\n#&gt;   &lt;chr&gt;       &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 (Intercept)     1     0.289 0.591   \n#&gt; 2 tarp            2    14.4   0.000730\n#&gt; 3 water           1     0.209 0.648   \n#&gt; 4 tarp:water      2     2.59  0.274"
  },
  {
    "objectID": "model-fitting.html#model-fit-and-diagnostics",
    "href": "model-fitting.html#model-fit-and-diagnostics",
    "title": "3¬† Model Fitting",
    "section": "\n3.3 Model Fit and Diagnostics",
    "text": "3.3 Model Fit and Diagnostics\nThe quality of model fit can be assessed using a variety of statistics readily available in spmodel, including AIC, AICc, and pseudo R-squared. Additionally, model diagnostics such as leverage, fitted values, residuals (several types), and Cook‚Äôs distance. While both the model fit statistics and the diagnostics can be found with individual functions like AIC(), residuals(), cooks.distance(), etc., they can also be computed using glance() (for the model fit statistics) and augment() (for the diagnostics).\n\nglance(spmod)\n#&gt; # A tibble: 1 √ó 9\n#&gt;       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1   365     2     3  367.  373.  373.  -184.      363            0.683\n\nThe output from glance() shows model fit statistics for the spatial linear model with an exponential covariance structure for the errors.\n\n\n\n\n\n\nExercise\n\n\n\nThe glances() function allows us to compare the model fit statistics for a few different models simultaneously. Use splm() to fit a model with a Mat√©rn spatial covariance (by specifying \"matern\" for spcov_type) and a model with no spatial covariance (by specifying \"none\" for spcov_type). Then, use the glances() function, providing each model object as an argument, to compare the model fit statistics of each model.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nmat &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"matern\")\nnone &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"none\")\nglances(spmod, mat, none)\n#&gt; # A tibble: 3 √ó 10\n#&gt;   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 mat     365     2     4  316.  324.  324.  -158.     363             0.630\n#&gt; 2 spmod   365     2     3  367.  373.  373.  -184.     363             0.683\n#&gt; 3 none    365     2     1  634.  636.  636.  -317.     363.            0.671\n\nWe see from the output that (1) the spatial models provide a much better fit to the data than the linear model with independent errors and (2) the extra ‚Äúsmoothness‚Äù parameter incorporated in the \"matern\" covariance substantially improves the model fit compared to the \"exponential\" covariance. We are able to tell this by looking at the AICc, which glances() automatically sorts by (lower values of AIC and AICc indicate a better model fit).\n\n\n\nThe augment() function provides many model diagnostics statistics in a single tibble:\n\naugment(spmod)\n#&gt; Simple feature collection with 365 features and 7 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 365 √ó 8\n#&gt;   log_Zn log_dist2road .fitted .resid   .hat .cooksd .std.resid\n#&gt; *  &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1   7.33          2.68    8.26 -0.928 0.0200 0.0142       1.18 \n#&gt; 2   7.38          2.68    8.26 -0.880 0.0200 0.0186       1.35 \n#&gt; 3   7.58          2.54    8.34 -0.755 0.0225 0.00482      0.647\n#&gt; 4   7.63          2.97    8.09 -0.464 0.0197 0.0305       1.74 \n#&gt; 5   7.26          2.72    8.24 -0.977 0.0215 0.131        3.45 \n#&gt; 6   7.65          2.76    8.21 -0.568 0.0284 0.0521       1.89 \n#&gt; # ‚Ñπ 359 more rows\n#&gt; # ‚Ñπ 1 more variable: geometry &lt;POINT [m]&gt;\n\naugment() returns a tibble with many model diagnostics statistics, including\n\n\n.fitted, the fitted value, calculated from the estimated fixed effects in the model\n\n.hat, the Mahalanobis distance, a metric of leverage\n\n.cooksd, the Cook‚Äôs distance, a metric of influence\n\n.std.resid, the standardized residual\n\nIf the model is correct, then the standardized residuals have mean 0, standard deviation 1, and are uncorrelated.\nThe plot() function can be used on a fitted model object to construct a few pre-specified plots of these model diagnostics. For example, the following code plots the Cook‚Äôs distance, a measure of influence, which quantifies each observation‚Äôs impact on model fit:\n\nplot(spmod, which = 4)\n\n\n\n\nThe other 7 plots for model objects fit with splm() can be read about in the help: ?plot.spmodel.\nIf the grammar of graphics plotting syntax in ggplot2 is more familiar, then we can also construct plots with the augmented model:\n\naug_df &lt;- augment(spmod)\nggplot(data = aug_df, aes(x = seq_len(nrow(aug_df)),\n                          y = .cooksd)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Row Number\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse spmodel‚Äôs plot function on the spmod object to construct a plot of the fitted spatial covariance vs spatial distance. To learn more about the options for spmodel‚Äôs plot function, run ?plot.spmodel or visit this link.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nplot(spmod, which = 7)"
  },
  {
    "objectID": "model-fitting.html#r-code-appendix",
    "href": "model-fitting.html#r-code-appendix",
    "title": "3¬† Model Fitting",
    "section": "\n3.4 R Code Appendix",
    "text": "3.4 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nmoss\nggplot(moss, aes(color = log_Zn)) +\n  geom_sf(size = 2) +\n  scale_color_viridis_c() +\n  scale_x_continuous(breaks = seq(-163, -164, length.out = 2)) +\n  theme_gray(base_size = 14)\nspmod &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"exponential\")\nsummary(spmod)\ntidy(spmod)\ntidy(spmod, effects = \"spcov\")\ncaribou_mod &lt;- splm(z ~ tarp + water + tarp:water,\n                    data = caribou, spcov_type = \"pexponential\",\n                    xcoord = x, ycoord = y)\nsummary(caribou_mod)\nanova(caribou_mod)\ntidy(anova(caribou_mod))\nglance(spmod)\nmat &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"matern\")\nnone &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = \"none\")\nglances(spmod, mat, none)\naugment(spmod)\nplot(spmod, which = 4)\naug_df &lt;- augment(spmod)\nggplot(data = aug_df, aes(x = seq_len(nrow(aug_df)),\n                          y = .cooksd)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Row Number\")\nplot(spmod, which = 7)\n\n\n\n\n\nCressie, Noel. 1985. ‚ÄúFitting Variogram Models by Weighted Least Squares.‚Äù Journal of the International Association for Mathematical Geology 17 (5): 563‚Äì86.\n\n\nCurriero, Frank C, and Subhash Lele. 1999. ‚ÄúA Composite Likelihood Approach to Semivariogram Estimation.‚Äù Journal of Agricultural, Biological, and Environmental Statistics, 9‚Äì28.\n\n\nPebesma, Edzer. 2018. ‚ÄúSimple Features for R: Standardized Support for Spatial Vector Data.‚Äù The R Journal 10 (1): 439‚Äì46. https://doi.org/10.32614/RJ-2018-009."
  },
  {
    "objectID": "prediction.html#data-introduction",
    "href": "prediction.html#data-introduction",
    "title": "4¬† Prediction",
    "section": "\n4.1 Data Introduction",
    "text": "4.1 Data Introduction\nThe moose data in the spmodel package contains observations from a moose survey in Alaska. The Alaska Department of Fish and Game performed the survey on 218 spatial locations throughout the region of interest. Our goal is to predict the moose count in 100 spatial locations in the moose_pred data frame that were not surveyed. Both elev, the elevation of the spatial location, and strat, a stratification variable based on landscape metrics that is either \"L\" for Low or \"M\" for medium, are possible predictors for moose count.\n\nmoose\n#&gt; Simple feature collection with 218 features and 4 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; First 10 features:\n#&gt;        elev strat count presence                 geometry\n#&gt; 1  468.9167     L     0        0 POINT (293542.6 1541016)\n#&gt; 2  362.3125     L     0        0 POINT (298313.1 1533972)\n#&gt; 3  172.7500     M     0        0 POINT (281896.4 1532516)\n#&gt; 4  279.6250     L     0        0 POINT (298651.3 1530264)\n#&gt; 5  619.6000     L     0        0 POINT (311325.3 1527705)\n#&gt; 6  164.1250     M     0        0 POINT (291421.5 1518398)\n#&gt; 7  163.5000     M     0        0 POINT (287298.3 1518035)\n#&gt; 8  186.3500     L     0        0 POINT (279050.9 1517324)\n#&gt; 9  362.3125     L     0        0 POINT (346145.9 1512479)\n#&gt; 10 430.5000     L     0        0 POINT (321354.6 1509966)\n\nWe visualize the moose counts by running\n\nggplot(data = moose, aes(colour = count)) +\n  geom_sf() +\n  scale_colour_viridis_c(limits = c(0, 40)) +\n  theme_minimal()\n\n\n\n\nFrom our plot, we see that there are a large number of observed moose counts at or near 0. Therefore, perhaps a generalized linear model in the Poisson or negative binomial family might be more appropriate for this particular data set. We will come back to this issue in Chapter¬†7; however, for this section, we assume that a standard spatial linear model is appropriate.\n\n\n\n\n\n\nNote\n\n\n\nWe also see in the plot that the spatial locations in the survey were clearly not randomly selected. Random selection of spatial locations is only required for inference in design-based analyses. For model-based analyses, random selection of spatial locations is not necessarily an assumption (Brus (2021); Dumelle et al. (2022))."
  },
  {
    "objectID": "prediction.html#moose-count-predictions",
    "href": "prediction.html#moose-count-predictions",
    "title": "4¬† Prediction",
    "section": "\n4.2 Moose Count Predictions",
    "text": "4.2 Moose Count Predictions\nIn this section, we show how to use predict() and augment() to perform spatial prediction (also called Kriging) for point-referenced data from a model fit with splm(). First, we fit a spatial model to the moose data with a \"spherical\" spatial covariance and elev, strat, and their interaction as predictors in the model:\n\nmoosemod &lt;- splm(count ~ elev * strat, data = moose,\n                  spcov_type = \"spherical\")\ntidy(moosemod)\n#&gt; # A tibble: 4 √ó 5\n#&gt;   term        estimate std.error statistic p.value\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 (Intercept)   0.310    9.02       0.0344 0.973  \n#&gt; 2 elev          0.0141   0.00806    1.76   0.0792 \n#&gt; 3 stratM        6.93     2.26       3.07   0.00217\n#&gt; 4 elev:stratM  -0.0273   0.0130    -2.10   0.0357\n\n\n\n\n\n\n\nTip\n\n\n\nelev * strat is shorthand for elev + strat + elev:strat.\n\n\nWe then use predict() to predict the moose count at the spatial locations in moose_preds. The predict() function for models fit with splm() works in the same way as it does for models fit with lm(). We provide predict() with the fitted model object, along with a newdata argument that is an sf object, data.frame, or tibble that contains the locations at which to predict. newdata must have the same predictors as those used to fit the spatial model. We see that moose_preds contains the predictors (elev and strat) and the locations at which to predict:\n\nmoose_preds\n#&gt; Simple feature collection with 100 features and 2 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; First 10 features:\n#&gt;        elev strat                 geometry\n#&gt; 1  143.4000     L POINT (401239.6 1436192)\n#&gt; 2  324.4375     L POINT (352640.6 1490695)\n#&gt; 3  158.2632     L POINT (360954.9 1491590)\n#&gt; 4  221.3125     M POINT (291839.8 1466091)\n#&gt; 5  208.6875     M POINT (310991.9 1441630)\n#&gt; 6  218.3333     L POINT (304473.8 1512103)\n#&gt; 7  126.8125     L POINT (339011.1 1459318)\n#&gt; 8  122.0833     L POINT (342827.3 1463452)\n#&gt; 9  191.0000     L POINT (284453.8 1502837)\n#&gt; 10 105.3125     L POINT (391343.9 1483791)\n\n\n# results omitted\npredict(moosemod, newdata = moose_preds)\n\nThe output of predict() (not rendered in this document) gives predicted moose counts for the 100 unobserved spatial locations in moose_preds.\n\n\n\n\n\n\nNote\n\n\n\nExamining some of the predictions, we see that a few are negative. These unreasonable negative values are a further indication that we should use a spatial generalized linear model in Chapter¬†7.\n\n\nThe augment() function can also be used to obtain predictions for unobserved locations. While the required arguments to augment() are the same as the arguments used in predict() (the name of the fitted model object along with a newdata data frame), the output of augment() is an sf object with predictions in the .fitted column. Often, using augment() is more convenient than using predict(), as augment() returns an object with predictions alongside the spatial locations and any predictors used in the model.\n\nmoose_aug &lt;- augment(moosemod, newdata = moose_preds)\nmoose_aug\n#&gt; Simple feature collection with 100 features and 3 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 100 √ó 4\n#&gt;    elev strat .fitted           geometry\n#&gt; * &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;POINT [m]&gt;\n#&gt; 1  143. L       3.45  (401239.6 1436192)\n#&gt; 2  324. L       1.59  (352640.6 1490695)\n#&gt; 3  158. L      -0.267 (360954.9 1491590)\n#&gt; 4  221. M       2.39  (291839.8 1466091)\n#&gt; 5  209. M       7.62  (310991.9 1441630)\n#&gt; 6  218. L      -1.02  (304473.8 1512103)\n#&gt; # ‚Ñπ 94 more rows\n\nWe can construct a plot of the predictions with\n\nggplot(data = moose, aes(colour = count)) +\n  geom_sf(alpha = 0.4) +\n  geom_sf(data = moose_aug, aes(colour = .fitted)) +\n  scale_colour_viridis_c(limits = c(0, 40)) +\n  theme_minimal()\n\n\n\n\nIn the plot, the observed counts are also shown with faded points. We see that, most of the predictions are at or near 0, but spatial locations that are close in proximity to observed counts that are very large have a higher predicted count (for example, the point in the southwest region that is directly south of the observed count coloured yellow is predicted to be around 10).\n\n\n\n\n\n\nExercise\n\n\n\nExamine the help file ?augment.spmodel or by visiting this link and create site-wise 99% prediction intervals for the unsampled locations found in moose_preds.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\naugment(moosemod, newdata = moose_preds, interval = \"prediction\",\n        level = 0.99)\n#&gt; Simple feature collection with 100 features and 5 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 100 √ó 6\n#&gt;    elev strat .fitted .lower .upper           geometry\n#&gt; * &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;        &lt;POINT [m]&gt;\n#&gt; 1  143. L       3.45  -11.1    18.0 (401239.6 1436192)\n#&gt; 2  324. L       1.59  -13.4    16.5 (352640.6 1490695)\n#&gt; 3  158. L      -0.267 -15.1    14.5 (360954.9 1491590)\n#&gt; 4  221. M       2.39  -12.2    17.0 (291839.8 1466091)\n#&gt; 5  209. M       7.62   -6.99   22.2 (310991.9 1441630)\n#&gt; 6  218. L      -1.02  -15.9    13.9 (304473.8 1512103)\n#&gt; # ‚Ñπ 94 more rows"
  },
  {
    "objectID": "prediction.html#cross-validation",
    "href": "prediction.html#cross-validation",
    "title": "4¬† Prediction",
    "section": "\n4.3 Cross Validation",
    "text": "4.3 Cross Validation\nLeave-one-out cross validation can be performed to compare model fits as an alternative to the model fit metrics discussed in Chapter¬†3. In leave-one-out cross validation, a single observation is removed from the data, the model is re-fit, and a prediction is made for the held-out observation. Then, a loss metric like mean-squared-prediction error (MSPE) is computed and used to evaluate model fit. The lower the mean-squared-prediction error, the better the model fit.\nThe loocv() function can be used to perform leave-one-out cross validation on a fitted model object.\n\nloocv(moosemod)\n#&gt; [1] 32.15933\n\nThe output of loocv() is the mean-squared-prediction-error (MSPE).\n\n\n\n\n\n\nExercise\n\n\n\nFit a model with count as the response variable from the moose data with a \"spherical\" spatial covariance model for the random errors but no predictors as fixed effects. Compare the MSPE from leave-one-out cross-validation for this model with the previously fit moosemod. Which model is better, according to the leave-one-out cross-validation criterion?\nThen, for the model with the lower MSPE, obtain the leave-one-out cross validation predictions and their standard errors. Hint: run ?loocv or visit this link.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nmoose_int &lt;- splm(count ~ 1, data = moose,\n                  spcov_type = \"spherical\")\nloocv(moose_int)\n#&gt; [1] 33.56518\n\n\n# results omitted\nloocv(moosemod, cv_predict = TRUE, se.fit = TRUE)"
  },
  {
    "objectID": "prediction.html#r-code-appendix",
    "href": "prediction.html#r-code-appendix",
    "title": "4¬† Prediction",
    "section": "\n4.4 R Code Appendix",
    "text": "4.4 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nmoose\nggplot(data = moose, aes(colour = count)) +\n  geom_sf() +\n  scale_colour_viridis_c(limits = c(0, 40)) +\n  theme_minimal()\nmoosemod &lt;- splm(count ~ elev * strat, data = moose,\n                  spcov_type = \"spherical\")\ntidy(moosemod)\nmoose_preds\n# results omitted\npredict(moosemod, newdata = moose_preds)\nmoose_aug &lt;- augment(moosemod, newdata = moose_preds)\nmoose_aug\nggplot(data = moose, aes(colour = count)) +\n  geom_sf(alpha = 0.4) +\n  geom_sf(data = moose_aug, aes(colour = .fitted)) +\n  scale_colour_viridis_c(limits = c(0, 40)) +\n  theme_minimal()\naugment(moosemod, newdata = moose_preds, interval = \"prediction\",\n        level = 0.99)\nloocv(moosemod)\nmoose_int &lt;- splm(count ~ 1, data = moose,\n                  spcov_type = \"spherical\")\nloocv(moose_int)\n# results omitted\nloocv(moosemod, cv_predict = TRUE, se.fit = TRUE)\n\n\n\n\n\nBrus, Dick J. 2021. ‚ÄúStatistical Approaches for Spatial Sample Survey: Persistent Misconceptions and New Developments.‚Äù European Journal of Soil Science 72 (2): 686‚Äì703.\n\n\nDumelle, Michael, Matt Higham, Jay M Ver Hoef, Anthony R Olsen, and Lisa Madsen. 2022. ‚ÄúA Comparison of Design-Based and Model-Based Approaches for Finite Population Spatial Sampling and Inference.‚Äù Methods in Ecology and Evolution 13 (9): 2018‚Äì29."
  },
  {
    "objectID": "additional-features.html#multiple-models",
    "href": "additional-features.html#multiple-models",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.1 Multiple Models",
    "text": "5.1 Multiple Models\nsplm() fits multiple models simultaneously when spcov_type is a vector with more than one element:\n\nspmods &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = c(\"exponential\", \"gaussian\"))\n\nspmods is a list with two elements: exponential, using the exponential spatial covariance; and gaussian, using the Gaussian spatial covariance.\n\nnames(spmods)\n#&gt; [1] \"exponential\" \"gaussian\"\n\nspmods is natural to combine with glances() to glance at each model fit:\n\nglances(spmods)\n#&gt; # A tibble: 2 √ó 10\n#&gt;   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 expon‚Ä¶   365     2     3  367.  373.  373.  -184.     363             0.683\n#&gt; 2 gauss‚Ä¶   365     2     3  435.  441.  441.  -218.     363.            0.686\n\nand to combine with predict() to predict for each model fit.\n\n\n\n\n\n\nExercise\n\n\n\nWork with a neighbor to find 90% confidence intervals for the fixed effects in the Gaussian model using either (1) tidy() or (2) confint(). Before beginning, decide with your neighbor who will begin working on (1) tidy() and who will begin working on (2) confint().\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\ntidy(spmods$gaussian, conf.int = TRUE, conf.level = 0.90)\n#&gt; # A tibble: 2 √ó 7\n#&gt;   term          estimate std.error statistic p.value conf.low conf.high\n#&gt;   &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 (Intercept)      9.21     0.196       46.9       0    8.89      9.53 \n#&gt; 2 log_dist2road   -0.519    0.0184     -28.2       0   -0.549    -0.489\nconfint(spmods$gaussian, level = 0.90)\n#&gt;                      5 %       95 %\n#&gt; (Intercept)    8.8853387  9.5310288\n#&gt; log_dist2road -0.5493091 -0.4887111"
  },
  {
    "objectID": "additional-features.html#non-spatial-random-effects",
    "href": "additional-features.html#non-spatial-random-effects",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.2 Non-Spatial Random Effects",
    "text": "5.2 Non-Spatial Random Effects\nIn the moss data, there are actually some spatial locations that have more than one measurement due to multiple samples being collected at a single location or due to a single sample being tested multiple times in the laboratory. The sample variable indexes the spatial location:\n\nmoss\n#&gt; Simple feature collection with 365 features and 7 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 365 √ó 8\n#&gt;   sample field_dup lab_rep year  sideroad log_dist2road log_Zn\n#&gt;   &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt;   &lt;fct&gt; &lt;fct&gt;            &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 001PR  1         1       2001  N                 2.68   7.33\n#&gt; 2 001PR  1         2       2001  N                 2.68   7.38\n#&gt; 3 002PR  1         1       2001  N                 2.54   7.58\n#&gt; 4 003PR  1         1       2001  N                 2.97   7.63\n#&gt; 5 004PR  1         1       2001  N                 2.72   7.26\n#&gt; 6 005PR  1         1       2001  N                 2.76   7.65\n#&gt; # ‚Ñπ 359 more rows\n#&gt; # ‚Ñπ 1 more variable: geometry &lt;POINT [m]&gt;\n\nWe might expect Zinc concentration to be correlated within a spatial location; therefore, we might want to add sample as a non-spatial random effect (here, an intercept random effect) to the model with log_Zn as the response and log_dist2road as the predictor. The splm() function allows non-spatial random effects to be incorporated with the random argument, which takes a formula specification that is similar in syntax as the nlme (Pinheiro and Bates 2006) and lme4 (Bates et al. 2015) packages.\n\nrandint &lt;- splm(log_Zn ~ log_dist2road,\n                data = moss, spcov_type = \"exponential\",\n                random = ~ (1 | sample))\n\n\n\n\n\n\n\nTip\n\n\n\nFor the randint model, in the random argument, sample is shorthand for (1 | sample). So the randint model could be written more concisely as\n\nrandint &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ sample)\n\n\n\nThe summary output now shows an estimate of the variance of the random intercepts, in addition to the estimated fixed effects and estimated spatial covariance parameters.\n\nsummary(randint)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\", \n#&gt;     random = ~sample)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -2.6234 -1.3228 -0.8026 -0.2642  1.0998 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;               Estimate Std. Error z value Pr(&gt;|z|)    \n#&gt; (Intercept)    9.66066    0.26770   36.09   &lt;2e-16 ***\n#&gt; log_dist2road -0.55028    0.02071  -26.58   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Pseudo R-squared: 0.6605\n#&gt; \n#&gt; Coefficients (exponential spatial covariance):\n#&gt;        de        ie     range \n#&gt; 3.153e-01 2.094e-02 1.083e+04 \n#&gt; \n#&gt; Coefficients (random effects):\n#&gt; 1 | sample \n#&gt;    0.07995\n\nAnd, glances() shows that the model with the random intercepts is a better fit to the data than the model without random intercepts.\n\nspmod &lt;- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\")\nglances(spmod, randint)\n#&gt; # A tibble: 2 √ó 10\n#&gt;   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 randi‚Ä¶   365     2     4  335.  343.  343.  -168.     363.            0.661\n#&gt; 2 spmod    365     2     3  367.  373.  373.  -184.     363             0.683\n\nAs another example, we might consider a model that also has random intercepts for year, or, a model that also has both random intercepts for year and random slopes for log_dist2road within year:\n\nyearint &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample + year))\nyearsl &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample) + \n                       (log_dist2road | year))\n\nglances() shows that, of these four models, the model that includes random intercepts for sample, random intercepts for year, and random slopes for year is best, according to the AIC and AICc metrics.\n\nglances(spmod, randint, yearint, yearsl)\n#&gt; # A tibble: 4 √ó 10\n#&gt;   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 yearsl   365     2     6  190.  202.  202.  -94.9     363.            0.215\n#&gt; 2 yeari‚Ä¶   365     2     4  230.  238.  238. -115.      363.            0.729\n#&gt; 3 randi‚Ä¶   365     2     4  335.  343.  343. -168.      363.            0.661\n#&gt; 4 spmod    365     2     3  367.  373.  373. -184.      363             0.683\n\n\n\n\n\n\n\nNote\n\n\n\nThe syntax ~ (log_dist2road | year) specifies that both random intercepts for year and random slopes for log_dist2road within year should be included in the model. If only random slopes are desired, then we should set random to ~ (-1 + log_dist2road | year).\n\n\n\n\n\n\n\n\nExercise\n\n\n\nPerhaps a model with random intercepts for sample and random intercepts and slopes for year but without any spatial covariance is an even better fit to the data. Fit such a model by specifying spcov_type to be \"none\". Then, use glances() to see how well this non-spatial model fits the moss data compared to the spatially explicit models.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nnospcov &lt;- splm(log_Zn ~ log_dist2road,\n                    data = moss, spcov_type = \"none\",\n                    random = ~ (1 | sample) + \n                      (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl, nospcov)\n#&gt; # A tibble: 5 √ó 10\n#&gt;   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 yearsl   365     2     6  190.  202.  202.  -94.9     363.            0.215\n#&gt; 2 yeari‚Ä¶   365     2     4  230.  238.  238. -115.      363.            0.729\n#&gt; 3 randi‚Ä¶   365     2     4  335.  343.  343. -168.      363.            0.661\n#&gt; 4 spmod    365     2     3  367.  373.  373. -184.      363             0.683\n#&gt; 5 nospc‚Ä¶   365     2     4  456.  464.  464. -228.      363             0.119\n## the model with no explicit spatial covariance has the worst fit \n## of the five models."
  },
  {
    "objectID": "additional-features.html#anisotropy",
    "href": "additional-features.html#anisotropy",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.3 Anisotropy",
    "text": "5.3 Anisotropy\nBy default, splm() uses isotropic spatial covariance. Spatial covariance is isotropic if it behaves similarly in all directions. A spatial covariance is (geometrically) anisotropic if it does not behave similarly in all directions. Anisotropic models require estimation of two additional parameters: rotate and scale, which control the behavior of the spatial covariance as a function of distance and direction.\n\naniso &lt;- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\",\n              anisotropy = TRUE)\naniso\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\", \n#&gt;     anisotropy = TRUE)\n#&gt; \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;   (Intercept)  log_dist2road  \n#&gt;         9.548         -0.546  \n#&gt; \n#&gt; \n#&gt; Coefficients (exponential spatial covariance):\n#&gt;        de         ie      range     rotate      scale  \n#&gt; 3.561e-01  6.812e-02  8.732e+03  2.435e+00  4.753e-01\n\nWe can again use glances to compare the model that allows for anisotropy with the isotropic model:\n\nglances(spmod, aniso)\n#&gt; # A tibble: 2 √ó 10\n#&gt;   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1 aniso   365     2     5  362.  372.  372.  -181.     363.            0.705\n#&gt; 2 spmod   365     2     3  367.  373.  373.  -184.     363             0.683\n\nThe anisotropic model does have lower AIC and AICc than the isotropic model, indicating a better fit. However, the reduction in AIC and AICc is quite small, so we may still prefer the isotropic model for simplicity and interpretability.\n\n\n\n\n\n\nExercise\n\n\n\nVisualize the anisotropic level curve for aniso using plot(). Hint: Run ?plot.spmodel or visit this link. Which direction does the model predict two responses will be more correlated?\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nplot(aniso, which = 8)\n\n\n\n\nA clockwise rotation of this level curve by rotate followed by a scaling of the minor axis by the reciprocal of scale yields a spatial covariance that is isotropic."
  },
  {
    "objectID": "additional-features.html#partition-factors",
    "href": "additional-features.html#partition-factors",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.4 Partition Factors",
    "text": "5.4 Partition Factors\nA partition factor is a categorical (or factor) variable that forces observations in different levels of the partition factor to be uncorrelated. The year variable in moss has two levels, 2001 and 2006, which correspond to the year of measurement. Suppose the goal is to fit a model that assumes observations from the same year are spatially correlated but observations from different years are not spatially correlated. In this context, year is a partition factor. We fit this model by running\n\npart &lt;- splm(log_Zn ~ log_dist2road,\n             data = moss, spcov_type = \"exponential\",\n             partition_factor = ~ year)\n\nLike the formula and random arguments, the partition_factor argument requires a formula object."
  },
  {
    "objectID": "additional-features.html#fixing-covariance-parameters",
    "href": "additional-features.html#fixing-covariance-parameters",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.5 Fixing Covariance Parameters",
    "text": "5.5 Fixing Covariance Parameters\nBy default, splm() estimates all unknown covariance parameters. However, we can also fix covariance parameters at known values with the spcov_initial argument for spatial covariance parameters and with the randcov_initial argument for non-spatial covariance parameters.\nAs an example, suppose that we want to fit a \"spherical\" covariance model to the moss data, but that, we want to fix the range at 20000 units so that errors from spatial locations more than 20000 units apart are not spatially correlated. We first create an spcov_initial object with the spcov_initial() function:\n\ninit_spher &lt;- spcov_initial(\"spherical\", range = 20000, known = \"range\")\ninit_spher\n#&gt; $initial\n#&gt; range \n#&gt; 20000 \n#&gt; \n#&gt; $is_known\n#&gt; range \n#&gt;  TRUE \n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"spherical\"\n\nWithin the function call, we specify that, for a \"spherical\" covariance, we would like to set the range parameter to 20000 and for that value to be known and therefore fixed in any subsequent estimation. We then provide init_spher as an argument to spcov_initial in splm():\n\nsplm(log_Zn ~ log_dist2road, data = moss,\n     spcov_initial = init_spher)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_initial = init_spher)\n#&gt; \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;   (Intercept)  log_dist2road  \n#&gt;        9.7194        -0.5607  \n#&gt; \n#&gt; \n#&gt; Coefficients (spherical spatial covariance):\n#&gt;        de         ie      range  \n#&gt; 4.545e-01  8.572e-02  2.000e+04\n\nWhen spcov_initial is provided, spcov_type is not a necessary argument to splm().\n\n\n\n\n\n\nExercise\n\n\n\nFit a \"spherical\" spatial covariance model to the moss data set without a nugget effect (i.e., the model should have the ie independent variance parameter set to 0 and treated as known). Verify in the summary output that the ie is indeed 0 for this model.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\ninit_no_ie &lt;- spcov_initial(\"spherical\", ie = 0, known = \"ie\")\nno_ie &lt;- splm(log_Zn ~ log_dist2road, data = moss,\n              spcov_initial = init_no_ie)\nsummary(no_ie)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_initial = init_no_ie)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -3.1766 -1.8420 -1.2975 -0.7249  0.6577 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;               Estimate Std. Error z value Pr(&gt;|z|)    \n#&gt; (Intercept)   10.27912   28.99660   0.354    0.723    \n#&gt; log_dist2road -0.56642    0.01974 -28.693   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Pseudo R-squared: 0.6967\n#&gt; \n#&gt; Coefficients (spherical spatial covariance):\n#&gt;        de        ie     range \n#&gt; 8.433e+02 0.000e+00 3.699e+07"
  },
  {
    "objectID": "additional-features.html#random-forest-spatial-residual-models",
    "href": "additional-features.html#random-forest-spatial-residual-models",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.6 Random Forest Spatial Residual Models",
    "text": "5.6 Random Forest Spatial Residual Models\nRandom forests are a popular machine-learning modeling tool. The random forest spatial residual model available in spmodel combines random forest modeling and spatial linear models. First, the model is fit using random forests and fitted values are obtained. Then the response residuals are used to fit a spatial linear model. Predictions at unobserved locations are computed as the sum of the random forest prediction and the predicted (i.e., Kriged) response residual from the spatial linear model. Suppose we split the moss data into training and test data sets, with the goal of predicting log_Zn in the test data.\n\nset.seed(1)\nn &lt;- NROW(moss)\nn_train &lt;- round(0.75 * n)\nn_test &lt;- n - n_train\ntrain_index &lt;- sample(n, size = n_train)\nmoss_train &lt;- moss[train_index, , ]\nmoss_test &lt;- moss[-train_index, , ]\n\nWe fit a random forest spatial residual model to the test data by running\n\nrfsrmod &lt;- splmRF(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\n\nWe make predictions for the test data by running\n\n# results omitted\npredict(rfsrmod, moss_test)\n\n\n\n\n\n\n\nExercise\n\n\n\nUse predict() to store the random forest spatial residual predictions of log_Zn at locations in the test data and then compute the mean-squared prediction error.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\npreds &lt;- predict(rfsrmod, newdata = moss_test)\nerrors &lt;- moss_test$log_Zn - preds\nmean(errors^2)\n#&gt; [1] 0.1831002"
  },
  {
    "objectID": "additional-features.html#r-code-appendix",
    "href": "additional-features.html#r-code-appendix",
    "title": "5¬† Additional Modeling Features",
    "section": "\n5.7 R Code Appendix",
    "text": "5.7 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nspmods &lt;- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = c(\"exponential\", \"gaussian\"))\nnames(spmods)\nglances(spmods)\ntidy(spmods$gaussian, conf.int = TRUE, conf.level = 0.90)\nconfint(spmods$gaussian, level = 0.90)\nmoss\nrandint &lt;- splm(log_Zn ~ log_dist2road,\n                data = moss, spcov_type = \"exponential\",\n                random = ~ (1 | sample))\nrandint &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ sample)\nsummary(randint)\nspmod &lt;- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\")\nglances(spmod, randint)\nyearint &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample + year))\nyearsl &lt;- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample) + \n                       (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl)\nnospcov &lt;- splm(log_Zn ~ log_dist2road,\n                    data = moss, spcov_type = \"none\",\n                    random = ~ (1 | sample) + \n                      (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl, nospcov)\n## the model with no explicit spatial covariance has the worst fit \n## of the five models.\naniso &lt;- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\",\n              anisotropy = TRUE)\naniso\nglances(spmod, aniso)\nplot(aniso, which = 8)\npart &lt;- splm(log_Zn ~ log_dist2road,\n             data = moss, spcov_type = \"exponential\",\n             partition_factor = ~ year)\ninit_spher &lt;- spcov_initial(\"spherical\", range = 20000, known = \"range\")\ninit_spher\nsplm(log_Zn ~ log_dist2road, data = moss,\n     spcov_initial = init_spher)\ninit_no_ie &lt;- spcov_initial(\"spherical\", ie = 0, known = \"ie\")\nno_ie &lt;- splm(log_Zn ~ log_dist2road, data = moss,\n              spcov_initial = init_no_ie)\nsummary(no_ie)\nset.seed(1)\nn &lt;- NROW(moss)\nn_train &lt;- round(0.75 * n)\nn_test &lt;- n - n_train\ntrain_index &lt;- sample(n, size = n_train)\nmoss_train &lt;- moss[train_index, , ]\nmoss_test &lt;- moss[-train_index, , ]\nrfsrmod &lt;- splmRF(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\n# results omitted\npredict(rfsrmod, moss_test)\npreds &lt;- predict(rfsrmod, newdata = moss_test)\nerrors &lt;- moss_test$log_Zn - preds\nmean(errors^2)\n\n\n\n\n\nBates, Douglas, Martin M√§chler, Ben Bolker, and Steve Walker. 2015. ‚ÄúFitting Linear Mixed-Effects Models Using lme4.‚Äù Journal of Statistical Software 67 (1): 1‚Äì48. https://doi.org/10.18637/jss.v067.i01.\n\n\nPinheiro, Jos√©, and Douglas Bates. 2006. Mixed-Effects Models in S and S-PLUS. Springer science & business media."
  },
  {
    "objectID": "large-data-sets.html#large-data-sets-in-spmodel",
    "href": "large-data-sets.html#large-data-sets-in-spmodel",
    "title": "6¬† Large Data Sets",
    "section": "\n6.1 Large Data Sets in spmodel\n",
    "text": "6.1 Large Data Sets in spmodel\n\nFor large observed data sets, fitting spatial linear models or making predictions is challenging because these operations require products that involve \\(\\boldsymbol{\\Sigma}^{-1}\\), which are computationally challenging to obtain. Typically, samples sizes approaching around 10,000 make model fitting or prediction infeasible on a standard computer in a reasonable amount of time (your definition of this may vary). This necessitates the use of model fitting and prediction tools that work for large data sets. spmodel offers big data methods for model fitting and prediction for point-referenced data via the local argument to splm() and predict().\n\n6.1.1 Model Fitting\nspmodel implements ‚Äúlocal‚Äù spatial indexing as described by Ver Hoef et al. (2023). Observations are first assigned an index. Then for the purposes of model fitting, observations with different indexes are assumed uncorrelated. Assuming observations with different indexes are uncorrelated induces sparsity in the covariance matrix, which greatly reduces the computational time required for operations that involve \\(\\mathbf{\\Sigma}^{-1}\\). Models fit using spatial indexing are capable of fitting models with hundreds of thousands of observations relatively quickly. Ver Hoef et al. (2023) showed that in a variety of scenarios, spatial indexing yielded fixed effect confidence intervals with proper coverage.\nTo illustrate spatial indexing in spmodel, we first simulate a response variable sim_response with 5000 observations at random spatial locations in the unit square (sim_coords). Then we place the response and coordinates in a data.frame:\n\nset.seed(18072023)\nsim_params &lt;- spcov_params(\"exponential\", de = 7, ie = 2, range = 0.7)\n\nn &lt;- 5000\nx &lt;- runif(n)\ny &lt;- runif(n)\nsim_coords &lt;- data.frame(x, y)\n\nsim_response &lt;- sprnorm(sim_params, data = sim_coords,\n                        xcoord = x, ycoord = y)\nsim_data &lt;- data.frame(sim_coords, sim_response)\n\nWe visualize the data by running\n\nggplot(sim_data, aes(x = x, y = y, color = sim_response)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-12, 6)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure¬†6.1: Distribution of simulated data\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe provide more detail regarding using spmodel to simulate data in Chapter¬†8.\n\n\nWe then use splm() to fit a spatial model to sim_data, providing the xcoord and ycoord arguments because sim_data is a data.frame, not an sf object. To implement spatial indexing, we use the local argument to splm(). Setting local to TRUE chooses default spatial indexing settings. We fit the model and time it by running\n\nfit_start_time &lt;- proc.time()\nbdmod &lt;- splm(sim_response ~ 1, data = sim_data,\n     spcov_type = \"exponential\",\n     xcoord = x, ycoord = y,\n     local = TRUE)\nfit_end_time &lt;- proc.time()\nfit_end_time - fit_start_time\n#&gt;    user  system elapsed \n#&gt;   6.738   0.120   6.862\n\nThe model with 5000 observations is fit in just 6.862 seconds.\n\n\n\n\n\n\nNote\n\n\n\nWhen the sample size is larger than 5000 observations, splm() implements spatial indexing by default, as fitting time without spatial indexing becomes lengthy. This behavior can be overridden by explicitly setting local to FALSE.\n\n\nA summary of the model fit yields\n\nsummary(bdmod)\n#&gt; \n#&gt; Call:\n#&gt; splm(formula = sim_response ~ 1, data = sim_data, spcov_type = \"exponential\", \n#&gt;     xcoord = x, ycoord = y, local = TRUE)\n#&gt; \n#&gt; Residuals:\n#&gt;    Min     1Q Median     3Q    Max \n#&gt; -8.560 -2.510 -0.590  1.416  8.726 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;             Estimate Std. Error z value Pr(&gt;|z|)  \n#&gt; (Intercept)   -3.019      1.489  -2.028   0.0426 *\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Coefficients (exponential spatial covariance):\n#&gt;     de     ie  range \n#&gt; 7.6598 1.5898 0.4432\n\nThe other way to specify local in splm() is via a list object, which offers much more control and customization over the spatial indexing. To learn more, read about local in splm()‚Äôs help page by running ?splm.\n\n\n\n\n\n\nNote\n\n\n\nEven for two separate data sets with the same sample size fit on the same machine, the computational time required to fit models via spatial indexing varies, depending on many factors like the number of iterations required for convergence and the number of observations assigned to each spatial index.\n\n\n\n6.1.2 Local Prediction\nUsing the fitted model, Ver Hoef et al. (2023) evaluates the performance of local neighborhood prediction. Local neighborhood prediction only uses some of the observed data to predict for an unobserved location of interest. Local neighborhood prediction is capable of making predictions of hundreds of thousands of observations relatively quickly. Ver Hoef et al. (2023) showed that in a variety of scenarios, local neighborhood prediction yielded prediction intervals with proper coverage.\nTo illustrate local neighborhood prediction in spmodel, we first simulate 3000 new random spatial locations in the unit square (sim_coords). Then we place the coordinates in a data.frame and visualize:\n\nn_pred &lt;- 3000\nx_pred &lt;- runif(n_pred)\ny_pred &lt;- runif(n_pred)\nsim_preds &lt;- tibble::tibble(x = x_pred, y = y_pred)\n\nTo implement local neighborhood prediction, we use the local argument to predict() (or augment()). Setting local in predict() (or augment()) to TRUE chooses default local neighborhood prediction settings. We compute local neighborhood predictions at the unobserved locations in sim_preds and time it by running\n\npred_start_time &lt;- proc.time()\nsim_preds$preds &lt;- predict(bdmod, newdata = sim_preds, local = TRUE)\npred_end_time &lt;- proc.time()\npred_end_time - pred_start_time\n#&gt;    user  system elapsed \n#&gt;   6.084   0.091   6.177\n\nThe 3000 predictions are computed in just 6.177 seconds. We visualize them by running\n\nggplot(sim_preds, aes(x = x, y = y, color = preds)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-12, 6)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure¬†6.2: Distribution of local neighborhood predictions using the model fit to the large simulated data set.\n\n\n\nThese predictions at the unobserved locations closely match the pattern of the observed data.\nThe other way to specify local in predict() (or augment()) is via a list object, which offers much more control and customization over the local neighborhood prediction. To learn more, read about local in predict()‚Äôs (or augment()‚Äôs) help page by running ?predict.spmodel (or ?augment.spmodel).\n\n\n\n\n\n\nTip\n\n\n\nloocv() also has a local argument for large data sets that is structured the same as local for predict() (and augment())."
  },
  {
    "objectID": "large-data-sets.html#r-code-appendix",
    "href": "large-data-sets.html#r-code-appendix",
    "title": "6¬† Large Data Sets",
    "section": "\n6.2 R Code Appendix",
    "text": "6.2 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nset.seed(18072023)\nsim_params &lt;- spcov_params(\"exponential\", de = 7, ie = 2, range = 0.7)\n\nn &lt;- 5000\nx &lt;- runif(n)\ny &lt;- runif(n)\nsim_coords &lt;- data.frame(x, y)\n\nsim_response &lt;- sprnorm(sim_params, data = sim_coords,\n                        xcoord = x, ycoord = y)\nsim_data &lt;- data.frame(sim_coords, sim_response)\nggplot(sim_data, aes(x = x, y = y, color = sim_response)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-12, 6)) +\n  theme_gray(base_size = 14)\nfit_start_time &lt;- proc.time()\nbdmod &lt;- splm(sim_response ~ 1, data = sim_data,\n     spcov_type = \"exponential\",\n     xcoord = x, ycoord = y,\n     local = TRUE)\nfit_end_time &lt;- proc.time()\nfit_end_time - fit_start_time\nsummary(bdmod)\nn_pred &lt;- 3000\nx_pred &lt;- runif(n_pred)\ny_pred &lt;- runif(n_pred)\nsim_preds &lt;- tibble::tibble(x = x_pred, y = y_pred)\npred_start_time &lt;- proc.time()\nsim_preds$preds &lt;- predict(bdmod, newdata = sim_preds, local = TRUE)\npred_end_time &lt;- proc.time()\npred_end_time - pred_start_time\nggplot(sim_preds, aes(x = x, y = y, color = preds)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-12, 6)) +\n  theme_gray(base_size = 14)\n\n\n\n\n\nVer Hoef, Jay M, Michael Dumelle, Matt Higham, Erin E Peterson, and Daniel J Isaak. 2023. ‚ÄúIndexing and Partitioning the Spatial Linear Model for Large Data Sets.‚Äù arXiv Preprint arXiv:2305.07811."
  },
  {
    "objectID": "generalized.html#the-spatial-generalized-linear-model",
    "href": "generalized.html#the-spatial-generalized-linear-model",
    "title": "7¬† Generalized Linear Models",
    "section": "\n7.1 The Spatial Generalized Linear Model",
    "text": "7.1 The Spatial Generalized Linear Model\nAs with spatial linear models, spatial generalized linear models can be fit in spmodel for point-referenced and areal data. A generalized linear model essentially uses the right-hand-side of Equation¬†2.2 as a model for a function of the mean of the response vector \\(\\mathbf{y}\\). More formally, the spatial generalized linear model can be written as \\[\ng(\\boldsymbol{\\mu}) = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon},\n\\] where \\(g(\\boldsymbol{\\mu})\\) is the link function that ‚Äúlinks‚Äù a function of the mean of \\(\\mathbf{y}\\) to \\(\\mathbf{X} \\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), and \\(\\boldsymbol{\\epsilon}\\). For example, in a spatial Poisson generalized linear model, each element of \\(\\mathbf{y}\\), \\(y_i\\), is modeled as a Poisson random variable with mean \\(\\mu_i\\). Denoting the vector of means as \\(\\boldsymbol{\\mu}\\), the log of the mean vector of \\(\\mathbf{y}\\) is then modeled as\n\\[\n\\text{log}(\\boldsymbol{\\mu}) = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon},\n\\]\nwhere the \\(\\text{log()}\\) function is applied element-wise over the mean vector \\(\\boldsymbol{\\mu}\\), which is the expected value of \\(\\mathbf{y}\\). In this example, the link function used is the log link. In the binomial generalized linear model family, a popular link function is the logit link, so that the model for the mean of a binomial response vector is\n\\[\n\\text{log}\\left(\\frac{\\boldsymbol{\\mu}}{1 - \\boldsymbol{\\mu}}\\right) = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon},\n\\] Table¬†7.1 shows the resposne distributions, data types, and link functions available in spmodel.\n\n\nTable¬†7.1: Response distributions and link functions available in spmodel\n\n\nDistribution\nData Type\nLink Function\n\n\n\nPoisson\nCount\nLog\n\n\nNegative Binomial\nCount\nLog\n\n\nBinomial\nBinary\nLogit\n\n\nBeta\nProportion\nLogit\n\n\nGamma\nSkewed\nLog\n\n\nInverse Gaussian\nSkewed\nLog"
  },
  {
    "objectID": "generalized.html#model-fitting",
    "href": "generalized.html#model-fitting",
    "title": "7¬† Generalized Linear Models",
    "section": "\n7.2 Model Fitting",
    "text": "7.2 Model Fitting\nThe spglm() function is used to fit spatial generalized linear models for point-referenced data, and the spgautor() function is used to fit spatial generalized linear models for areal data. spglm() and spgautor() share similar syntax with splm() and spautor(), respectively, though one additional argument is required:\n\n\nfamily: The generalized linear model family (i.e., the distribution of \\(\\mathbf{y}\\)). The family argument can be binomial, beta, Poisson, nbinomial, Gamma, or inverse.gaussian.\n\n\n\n\n\n\n\nNote\n\n\n\nThe family argument in spglm() and spgautor() uses similar syntax as the family argument in glm(). One difference, however, is that the link function for the spmodel functions is fixed. For binomial and beta responses, that link is the logit link function, while for Poisson, negative binomial, gamma, and inverse gaussian responses, that link is the log link function.\n\n\nWhile spatial generalized linear models can be fit to both point-referenced and areal data, we focus only on fitting spatial generalized linear models to point-referenced data with spglm() for the remainder of this section. Models are fit using a novel application of the Laplace approximation ‚Äì Ver Hoef et al. (2023) provide further details.\nWe observed in Chapter¬†4 that a generalized linear model may be a better choice for the count data in the Alaska moose. We specify a Poisson spatial generalized linear model with the following:\n\npoismod &lt;- spglm(count ~ elev * strat, data = moose,\n               family = poisson, spcov_type = \"spherical\")\nsummary(poismod)\n#&gt; \n#&gt; Call:\n#&gt; spglm(formula = count ~ elev * strat, family = poisson, data = moose, \n#&gt;     spcov_type = \"spherical\")\n#&gt; \n#&gt; Deviance Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -1.4245 -0.7783 -0.3653  0.1531  0.5900 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;              Estimate Std. Error z value Pr(&gt;|z|)    \n#&gt; (Intercept) -2.230575   0.958201  -2.328 0.019919 *  \n#&gt; elev         0.007623   0.003129   2.437 0.014820 *  \n#&gt; stratM       2.752234   0.782853   3.516 0.000439 ***\n#&gt; elev:stratM -0.010248   0.004472  -2.292 0.021928 *  \n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Pseudo R-squared: 0.09573\n#&gt; \n#&gt; Coefficients (spherical spatial covariance):\n#&gt;        de        ie     range \n#&gt;     3.892     1.163 51204.657 \n#&gt; \n#&gt; Coefficients (Dispersion for poisson family):\n#&gt; dispersion \n#&gt;          1\n\nAs with spatial linear models, the broom functions tidy(), glance() and augment(), as well as many other generic functions like plot(), are available for spatial generalized linear models. For example, we glance at the fitted model by running\n\nglance(poismod)\n#&gt; # A tibble: 1 √ó 9\n#&gt;       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n#&gt; 1   218     4     3 1332. 1338. 1338.  -666.     84.3           0.0957\n\n\n\n\n\n\n\nExercise\n\n\n\nFit a spatial negative binomial model to the moose data with count as the response and elev, strat, and their interaction as predictors. The negative binomial model relaxes the assumption in the spatial Poisson generalized linear model that the mean of a response variable \\(Y_i\\) and the variance of a response variable \\(Y_i\\) must be equal. Obtain a summary of the fitted model. Then compare their fits using loocv(). Which model is preferable?\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nnbmod &lt;- spglm(count ~ elev * strat, data = moose,\n               family = nbinomial, spcov_type = \"spherical\")\nloocv(poismod)\n#&gt; [1] 32.11889\nloocv(nbmod)\n#&gt; [1] 27.90761\n\nnbmod has the lower loocv() error, suggesting it is a better fit to the data."
  },
  {
    "objectID": "generalized.html#prediction",
    "href": "generalized.html#prediction",
    "title": "7¬† Generalized Linear Models",
    "section": "\n7.3 Prediction",
    "text": "7.3 Prediction\nWe can also make predictions of the mean function at unobserved locations. For example, we can use poismod to predict the mean number of moose (on the link scale) at the spatial locations in moose_preds using predict() by running:\n\n# results omitted\npredict(poismod, newdata = moose_preds)\n\nWe can also use augment():\n\naugment(poismod, newdata = moose_preds)\n#&gt; Simple feature collection with 100 features and 3 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 100 √ó 4\n#&gt;    elev strat .fitted           geometry\n#&gt; * &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;POINT [m]&gt;\n#&gt; 1  143. L      0.207  (401239.6 1436192)\n#&gt; 2  324. L     -0.0563 (352640.6 1490695)\n#&gt; 3  158. L     -1.24   (360954.9 1491590)\n#&gt; 4  221. M     -1.16   (291839.8 1466091)\n#&gt; 5  209. M      1.78   (310991.9 1441630)\n#&gt; 6  218. L     -1.84   (304473.8 1512103)\n#&gt; # ‚Ñπ 94 more rows\n\nBy default, predict() and augment() return predictions on the link scale. We return predictions on the response scale by running\n\naugmod &lt;- augment(poismod, newdata = moose_preds, type = \"response\")\n\nAnd we can visualize these predictions by running\n\nggplot(augmod, aes(color = .fitted)) +\n  geom_sf() +\n  scale_color_viridis_c(limits = c(0, 40)) +\n  theme_gray(base_size = 14)\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse spglm() to fit a spatial logistic regression model to the moose data using presence as the response variable and a Cauchy covariance function. Then, find the predicted probabilities that moose are present at the spatial locations in moose_preds (Hint: Use the type argument in predict() or augment()).\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nbinmod &lt;- spglm(presence ~ elev * strat, data = moose,\n               family = binomial, spcov_type = \"cauchy\")\naugment(binmod, newdata = moose_preds, type = \"response\")\n#&gt; Simple feature collection with 100 features and 3 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 100 √ó 4\n#&gt;    elev strat .fitted           geometry\n#&gt; * &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;POINT [m]&gt;\n#&gt; 1  143. L      0.489  (401239.6 1436192)\n#&gt; 2  324. L      0.376  (352640.6 1490695)\n#&gt; 3  158. L      0.0945 (360954.9 1491590)\n#&gt; 4  221. M      0.229  (291839.8 1466091)\n#&gt; 5  209. M      0.804  (310991.9 1441630)\n#&gt; 6  218. L      0.0411 (304473.8 1512103)\n#&gt; # ‚Ñπ 94 more rows"
  },
  {
    "objectID": "generalized.html#additional-modeling-features",
    "href": "generalized.html#additional-modeling-features",
    "title": "7¬† Generalized Linear Models",
    "section": "\n7.4 Additional Modeling Features",
    "text": "7.4 Additional Modeling Features\nAll advanced features available in spmodel for spatial linear models are also available for spatial generalized linear models. This means that spatial generalized linear models in spmodel can accommodate fixing spatial covariance parameters, fitting and predicting for multiple models, non-spatial random effects (on the link scale), partition factors, anisotropy (on the link scale), simulation, big data, and prediction."
  },
  {
    "objectID": "generalized.html#r-code-appendix",
    "href": "generalized.html#r-code-appendix",
    "title": "7¬† Generalized Linear Models",
    "section": "\n7.5 R Code Appendix",
    "text": "7.5 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\npoismod &lt;- spglm(count ~ elev * strat, data = moose,\n               family = poisson, spcov_type = \"spherical\")\nsummary(poismod)\nglance(poismod)\nnbmod &lt;- spglm(count ~ elev * strat, data = moose,\n               family = nbinomial, spcov_type = \"spherical\")\nloocv(poismod)\nloocv(nbmod)\n# results omitted\npredict(poismod, newdata = moose_preds)\naugment(poismod, newdata = moose_preds)\naugmod &lt;- augment(poismod, newdata = moose_preds, type = \"response\")\nggplot(augmod, aes(color = .fitted)) +\n  geom_sf() +\n  scale_color_viridis_c(limits = c(0, 40)) +\n  theme_gray(base_size = 14)\nbinmod &lt;- spglm(presence ~ elev * strat, data = moose,\n               family = binomial, spcov_type = \"cauchy\")\naugment(binmod, newdata = moose_preds, type = \"response\")\n\n\n\n\n\nVer Hoef, Jay M, Eryn Blagg, Michael Dumelle, Philip M Dixon, Dale L Zimmerman, and Paul Conn. 2023. ‚ÄúMarginal Inference for Hierarchical Generalized Linear Mixed Models with Patterned Covariance Matrices Using the Laplace Approximation.‚Äù arXiv Preprint arXiv:2305.02978."
  },
  {
    "objectID": "simulate.html#sec-simulate-gauss",
    "href": "simulate.html#sec-simulate-gauss",
    "title": "8¬† Simulating Data",
    "section": "\n8.1 Simulating Spatial Gaussian Data",
    "text": "8.1 Simulating Spatial Gaussian Data\nWe simulate Gaussian spatial data using sprnorm(). sprnorm() is similar in structure to rnorm() for simulating non-spatial Gaussian data. The first argument to sprnorm() is spcov_params, which is a spatial covariance parameter object created with spcov_params():\n\nparams &lt;- spcov_params(\"exponential\", de = 1, ie = 0.5, range = 5e5)\n\n\n\n\n\n\n\nNote\n\n\n\nWhen the type argument to coef() is \"spcov\", the estimated spatial covariance parameters are returned as an spcov_params object, naturally usable simulation-based contexts that require conditioning on these estimated parameters.\n\n\nsprnorm() simulates data at each location in data for each of n samples (specified via n) with some mean vector (specified via mean). We simulate one realization of zero-mean Gaussian data with spatial covariance structure from params at each location in the sulfate data by running\n\nset.seed(1)\nsulfate$z &lt;- sprnorm(params, data = sulfate)\n\nWe visualize this realization by running\n\nggplot(sulfate, aes(color = z)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)\n\n\n\n\nWe visualize an empirical semivariogram of this realization by running\n\nesv_out &lt;- esv(z ~ 1, sulfate)\nggplot(esv_out, aes(x = dist, y = gamma, size = np)) +\n  geom_point() +\n  lims(y = c(0, NA)) +\n  theme_gray(base_size = 14)"
  },
  {
    "objectID": "simulate.html#sec-simulate-other",
    "href": "simulate.html#sec-simulate-other",
    "title": "8¬† Simulating Data",
    "section": "\n8.2 Simulating Other Spatial Data",
    "text": "8.2 Simulating Other Spatial Data\nspmodel has a variety of additional simulation functions used to simulate binary, proportion, count, and skewed data:\n\nBinary data: sprbinom()\n\nProportion data: sprbeta()\n\nCount data: sprpois() and sprnbinom()\n\nSkewed data: sprgamma() and sprinvgauss()\n\n\nWith these simulation functions, the spatial covariance parameters and mean vector are specified on the appropriate link scale. For sprbinom() and sprbeta(), this is the logit link scale. For the other functions, this is the log link scale. We simulate one realization of Poisson data where on the link scale, the mean is zero and the spatial covariance structure is specified via params, by running\n\nsulfate$p &lt;- sprpois(params, data = sulfate)\n\nWe visualize this realization by running\n\nggplot(sulfate, aes(color = p)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nSimulating spatial data in spmodel requires the Cholesky decomposition of the covariance matrix, which can take awhile for sample sizes exceeding 10,000. Regardless of the number of realizations simulated, this Cholesky decompsition is only needed once, which means that simulating many realizations (via samples) takes nearly the same time as simulating just one."
  },
  {
    "objectID": "simulate.html#r-code-appendix",
    "href": "simulate.html#r-code-appendix",
    "title": "8¬† Simulating Data",
    "section": "\n8.3 R Code Appendix",
    "text": "8.3 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nparams &lt;- spcov_params(\"exponential\", de = 1, ie = 0.5, range = 5e5)\nset.seed(1)\nsulfate$z &lt;- sprnorm(params, data = sulfate)\nggplot(sulfate, aes(color = z)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)\nesv_out &lt;- esv(z ~ 1, sulfate)\nggplot(esv_out, aes(x = dist, y = gamma, size = np)) +\n  geom_point() +\n  lims(y = c(0, NA)) +\n  theme_gray(base_size = 14)\nsulfate$p &lt;- sprpois(params, data = sulfate)\nggplot(sulfate, aes(color = p)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)"
  },
  {
    "objectID": "areal-data.html#data-introduction",
    "href": "areal-data.html#data-introduction",
    "title": "9¬† Areal Data",
    "section": "\n9.1 Data Introduction",
    "text": "9.1 Data Introduction\nThroughout the section, we will use the seal data in the spmodel package. The seal data is an sf object with a POLYGON geometry. There are 62 polygons in the data, some of which have non-missing values of log_trend, which is the log of the estimated harbor-seal trends that were calculated from abundance data.\nThe following code generates a visualization of the seal data: polygons that are grey have a missing value for log_trend.\n\nggplot(seal, aes(fill = log_trend)) +\n  geom_sf() +\n  scale_fill_viridis_c() +\n  theme_bw(base_size = 14) \n\n\n\n\nOur goal is to fit a spatial autoregressive model (Equation¬†2.2 and Equation¬†2.4) to the log_trend response variable with the spautor() function. Then, we will use the fitted model to predict the log_trend for sites where log_trend is not recorded."
  },
  {
    "objectID": "areal-data.html#spautor-syntax-and-output-interpretation",
    "href": "areal-data.html#spautor-syntax-and-output-interpretation",
    "title": "9¬† Areal Data",
    "section": "\n9.2 spautor() Syntax and Output Interpretation",
    "text": "9.2 spautor() Syntax and Output Interpretation\nThe syntax for fitting a model to areal data with spautor() is very similar to that used for splm(). Again, there are generally at least three required arguments:\n\n\nformula: a formula that describes the relationship between the response variable (\\(\\mathbf{y}\\)) and explanatory variables (\\(\\mathbf{X}\\))\n\n\nformula in spautor() is the same as formula in lm() and splm()\n\n\n\n\ndata: a data.frame or sf object that contains the response variable, explanatory variables, and spatial information. Note that if data is a data.frame, then W is an additional required argument to spautor().\n\nspcov_type: the spatial covariance type (\"car\" or \"sar\")\n\nWe can fit a conditional auto-regressive (CAR) model with\n\nsealmod &lt;- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n#&gt; \n#&gt; Call:\n#&gt; spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\")\n#&gt; \n#&gt; Residuals:\n#&gt;      Min       1Q   Median       3Q      Max \n#&gt; -0.34441 -0.10403  0.04423  0.07351  0.20489 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;             Estimate Std. Error z value Pr(&gt;|z|)   \n#&gt; (Intercept) -0.07103    0.02492  -2.851  0.00436 **\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Coefficients (car spatial covariance):\n#&gt;      de   range   extra \n#&gt; 0.03226 0.42020 0.02235\n\nWe can relate some of the components in the summary output to the model in Equation¬†2.2 and Equation¬†2.4:\n\nthe value in the Estimate column of the Coefficients (fixed) table form \\(\\boldsymbol{\\hat{\\beta}}\\), an estimate of \\(\\boldsymbol{\\beta}\\).\nthe de value of 0.032 in the Coefficients (car spatial covariance) table is \\(\\hat{\\sigma}^2_{de}\\), which is an estimate of \\(\\sigma^2_{de}\\), the variance of \\(\\boldsymbol{\\tau}\\).\nthe range value of 0.42 in the Coefficients (car spatial covariance) table is \\(\\hat{\\phi}\\), an estimate of \\(\\phi\\) in Equation¬†2.4.\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, \\(\\sigma^2_{ie}\\) is assumed to be 0 for autoregressive models and hence, ie is omitted from the summary output.\n\n\nThough the weight matrix \\(\\mathbf{W}\\) in Equation¬†2.4 used in the model does not appear in the summary output, we can pull the weight matrix from the sealmod object with\n\nsealmod$W\n\nBy default, spautor() uses queen contiguity to form the weight matrix: observations are ‚Äúneighbors‚Äù if they share at least one boundary (even if that boundary is a single point). Recall that observations are not considered neighbors with themselves. Also by default, spautor() row standardizes the weight matrix so that each of the rows in \\(\\mathbf{W}\\) sum to \\(1\\). Row standardization of the weight matrix is performed by default because doing so results in ‚Äúnice‚Äù properties of the resulting covariance matrix (Ver Hoef et al. 2018). The first row of the weight matrix is\n\nsealmod$W[1, ]\n#&gt;  [1] 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt;  [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [15] 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\n#&gt; [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#&gt; [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n\nThe output indicates that the first observation is neighbors with the second observation, the sixteenth observation, and the twenty-eighth observation.\nFinally, if we re-examine \\(\\mathbf{W}\\), we can note that some rows of \\(\\mathbf{W}\\) do not have any positive values, indicating that some observations in the data have no neighbors. Looking back on the plot of the data, we see that there are indeed a few ‚Äúisland‚Äù sites that do not share a boundary with any other polygons. The errors for these spatial locations are assumed to be uncorrelated with all other random errors, and, they are given a unique variance parameter that is the extra spatial covariance estimate in the summary output of the model."
  },
  {
    "objectID": "areal-data.html#additional-analysis",
    "href": "areal-data.html#additional-analysis",
    "title": "9¬† Areal Data",
    "section": "\n9.3 Additional Analysis",
    "text": "9.3 Additional Analysis\nMost of the helper functions for models fit with splm() are also useful for models fit with spautor(). Additionally, most of the additional arguments for splm() are also additional arguments for spautor().\nOf the functions mentioned in Chapter¬†3, the following are also available to use on a model fit with spautor():\n\n\naugment(), glance(), and glances()\n\nmodel fit statistics with AIC(), AICc() and GR2()\n\nmodel diagnostics statistics with cooks.distance(), residuals(), fitted(), etc.\n\nOf the arguments mentioned in Chapter¬†3, spcov_initial and random are available for spautor().\n\n\n\n\n\n\nNote\n\n\n\nThe anisotropy argument is not available for spautor() because the covariance for an autoregressive model is based on the neighborhood structure of the spatial locations, not on distance.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nChoose a couple of the helper functions that you would like to explore and apply those functions to the fitted seal model.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nAIC(sealmod)\n#&gt; [1] -30.87504\nfitted(sealmod)\n#&gt;           2           3           4           5           6           7 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 \n#&gt;           8          10          11          12          14          16 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 \n#&gt;          17          20          21          22          23          24 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 \n#&gt;          25          26          28          29          30          31 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 \n#&gt;          33          34          35          37          38          39 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 -0.07103294 \n#&gt;          41          45          59          60 \n#&gt; -0.07103294 -0.07103294 -0.07103294 -0.07103294"
  },
  {
    "objectID": "areal-data.html#prediction-with-areal-data",
    "href": "areal-data.html#prediction-with-areal-data",
    "title": "9¬† Areal Data",
    "section": "\n9.4 Prediction with Areal Data",
    "text": "9.4 Prediction with Areal Data\nPrediction of response values for unobserved polygons with areal data requires that the polygons with missing response values be included in the data argument supplied to spautor(). The reason for this requirement is that exclusion of these polygons changes the underlying neighborhood structure of the data, and, therefore changes the covariance matrix.\nFor areal data, we can obtain predictions for unobserved polygons using predict() on the fitted model object or augment() on the fitted model object, specifying the newdata argument to be mod$newdata. Both approaches are given below:\n\nsealmod &lt;- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n\npredict(sealmod)\n\n\naugment(sealmod, newdata = sealmod$newdata)\n#&gt; Simple feature collection with 28 features and 2 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1115097 ymax: 1132682\n#&gt; Projected CRS: NAD83 / Alaska Albers\n#&gt; # A tibble: 28 √ó 3\n#&gt;   log_trend  .fitted                                                 geometry\n#&gt; *     &lt;dbl&gt;    &lt;dbl&gt;                                            &lt;POLYGON [m]&gt;\n#&gt; 1        NA -0.115   ((1035002 1054710, 1035002 1054542, 1035002 1053542, 10‚Ä¶\n#&gt; 2        NA -0.00918 ((1043093 1020553, 1043097 1020550, 1043101 1020550, 10‚Ä¶\n#&gt; 3        NA -0.0603  ((1099737 1054310, 1099752 1054262, 1099788 1054278, 10‚Ä¶\n#&gt; 4        NA -0.0360  ((1099002 1036542, 1099134 1036462, 1099139 1036431, 10‚Ä¶\n#&gt; 5        NA -0.0724  ((1076902 1053189, 1076912 1053179, 1076931 1053179, 10‚Ä¶\n#&gt; 6        NA -0.0549  ((1070501 1046969, 1070317 1046598, 1070308 1046542, 10‚Ä¶\n#&gt; # ‚Ñπ 22 more rows\n\n\n\n\n\n\n\nNote\n\n\n\nThe mod$newdata syntax also works for models fit with splm(), where the data used contains missing values for the response variable at any unobserved locations.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nVerify that the fitted autoregressive model with the seal data changes when the polygons with missing response values are excluded from the data argument in spautor(). The following code creates a data without the polygons with missing values:\n\nis_missing &lt;- is.na(seal$log_trend)\nseal_nomiss &lt;- seal[!is_missing, , ]\n\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nsealmod_nomiss &lt;- spautor(log_trend ~ 1,\n                          data = seal_nomiss, spcov_type = \"car\")\nprint(sealmod)\n#&gt; \n#&gt; Call:\n#&gt; spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\")\n#&gt; \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt; (Intercept)  \n#&gt;    -0.07103  \n#&gt; \n#&gt; \n#&gt; Coefficients (car spatial covariance):\n#&gt;      de    range    extra  \n#&gt; 0.03226  0.42020  0.02235\nprint(sealmod_nomiss)\n#&gt; \n#&gt; Call:\n#&gt; spautor(formula = log_trend ~ 1, data = seal_nomiss, spcov_type = \"car\")\n#&gt; \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt; (Intercept)  \n#&gt;    -0.08159  \n#&gt; \n#&gt; \n#&gt; Coefficients (car spatial covariance):\n#&gt;      de    range    extra  \n#&gt; 0.02348  0.35660  0.01889"
  },
  {
    "objectID": "areal-data.html#spatial-generalized-autoregressive-mdoels",
    "href": "areal-data.html#spatial-generalized-autoregressive-mdoels",
    "title": "9¬† Areal Data",
    "section": "\n9.5 Spatial Generalized Autoregressive Mdoels",
    "text": "9.5 Spatial Generalized Autoregressive Mdoels\nIn Chapter¬†7 we discussed how to formulate spatial generalized linear models using spglm(), building off the construction of spatial linear models fit using splm(). Similarly, we can formulate spatial generalized autoregressive models using spgautor(), building off the construction of spatial autoregressive models fit using spautor(). Spatial generalized autoregressive models can be fit to binomial, proportion, count, and skewed data by providing the family argument, as with the models fit using spglm() in Chapter¬†7. For example, we model exp(log_trend) (which is strictly positive) as a gamma random variable with the simultaneous autoregressive spatial covariance by running\n\nsealgmod &lt;- spgautor(exp(log_trend) ~ 1, family = Gamma,\n                  data = seal, spcov_type = \"sar\")\nsummary(sealgmod)\n#&gt; \n#&gt; Call:\n#&gt; spgautor(formula = exp(log_trend) ~ 1, family = Gamma, data = seal, \n#&gt;     spcov_type = \"sar\")\n#&gt; \n#&gt; Deviance Residuals:\n#&gt;      Min       1Q   Median       3Q      Max \n#&gt; -0.32310 -0.09852  0.03765  0.07403  0.21513 \n#&gt; \n#&gt; Coefficients (fixed):\n#&gt;             Estimate Std. Error z value Pr(&gt;|z|)  \n#&gt; (Intercept) -0.07391    0.03022  -2.446   0.0145 *\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Coefficients (sar spatial covariance):\n#&gt;        de     range     extra \n#&gt; 2.092e-06 5.935e-01 1.233e-02 \n#&gt; \n#&gt; Coefficients (Dispersion for Gamma family):\n#&gt; dispersion \n#&gt;      68.22"
  },
  {
    "objectID": "areal-data.html#r-code-appendix",
    "href": "areal-data.html#r-code-appendix",
    "title": "9¬† Areal Data",
    "section": "\n9.6 R Code Appendix",
    "text": "9.6 R Code Appendix\n\nlibrary(spmodel)\nlibrary(ggplot2)\nggplot(seal, aes(fill = log_trend)) +\n  geom_sf() +\n  scale_fill_viridis_c() +\n  theme_bw(base_size = 14) \nsealmod &lt;- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\nspcov_params_car &lt;- coef(sealmod, type = \"spcov\")\nde_car &lt;- as.vector(round(spcov_params_car[[\"de\"]], digits = 3))\nrange_car &lt;- as.vector(round(spcov_params_car[[\"range\"]], digits = 3))\nsealmod$W\nsealmod$W[1, ]\nAIC(sealmod)\nfitted(sealmod)\nsealmod &lt;- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n\npredict(sealmod)\naugment(sealmod, newdata = sealmod$newdata)\nis_missing &lt;- is.na(seal$log_trend)\nseal_nomiss &lt;- seal[!is_missing, , ]\nsealmod_nomiss &lt;- spautor(log_trend ~ 1,\n                          data = seal_nomiss, spcov_type = \"car\")\nprint(sealmod)\nprint(sealmod_nomiss)\nsealgmod &lt;- spgautor(exp(log_trend) ~ 1, family = Gamma,\n                  data = seal, spcov_type = \"sar\")\nsummary(sealgmod)\n\n\n\n\n\nVer Hoef, Jay M, Erin E Peterson, Mevin B Hooten, Ephraim M Hanks, and Marie-Jos√®e Fortin. 2018. ‚ÄúSpatial Autoregressive Models for Statistical Inference from Ecological Data.‚Äù Ecological Monographs 88 (1): 36‚Äì59."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bates, Douglas, Martin M√§chler, Ben Bolker, and Steve Walker. 2015.\n‚ÄúFitting Linear Mixed-Effects Models Using lme4.‚Äù Journal of Statistical\nSoftware 67 (1): 1‚Äì48. https://doi.org/10.18637/jss.v067.i01.\n\n\nBrus, Dick J. 2021. ‚ÄúStatistical Approaches for Spatial Sample\nSurvey: Persistent Misconceptions and New Developments.‚Äù\nEuropean Journal of Soil Science 72 (2): 686‚Äì703.\n\n\nCressie, Noel. 1985. ‚ÄúFitting Variogram Models by Weighted Least\nSquares.‚Äù Journal of the International Association for\nMathematical Geology 17 (5): 563‚Äì86.\n\n\nCurriero, Frank C, and Subhash Lele. 1999. ‚ÄúA Composite Likelihood\nApproach to Semivariogram Estimation.‚Äù Journal of\nAgricultural, Biological, and Environmental Statistics, 9‚Äì28.\n\n\nDumelle, Michael, Matt Higham, and Jay M. Ver Hoef. 2023. ‚Äúspmodel: Spatial Statistical Modeling and\nPrediction in R.‚Äù PLOS ONE 18 (3): 1‚Äì32. https://doi.org/10.1371/journal.pone.0282524.\n\n\nDumelle, Michael, Matt Higham, Jay M Ver Hoef, Anthony R Olsen, and Lisa\nMadsen. 2022. ‚ÄúA Comparison of Design-Based and Model-Based\nApproaches for Finite Population Spatial Sampling and Inference.‚Äù\nMethods in Ecology and Evolution 13 (9): 2018‚Äì29.\n\n\nPebesma, Edzer. 2018. ‚ÄúSimple Features for R:\nStandardized Support for Spatial Vector Data.‚Äù\nThe R Journal 10 (1): 439‚Äì46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPinheiro, Jos√©, and Douglas Bates. 2006. Mixed-Effects Models in\nS and S-PLUS. Springer science &\nbusiness media.\n\n\nRobinson, David, Alex Hayes, and Simon Couch. 2021. Broom: Convert\nStatistical Objects into Tidy Tibbles. https://CRAN.R-project.org/package=broom.\n\n\nVer Hoef, Jay M, Eryn Blagg, Michael Dumelle, Philip M Dixon, Dale L\nZimmerman, and Paul Conn. 2023. ‚ÄúMarginal Inference for\nHierarchical Generalized Linear Mixed Models with Patterned Covariance\nMatrices Using the Laplace Approximation.‚Äù arXiv Preprint\narXiv:2305.02978.\n\n\nVer Hoef, Jay M, Michael Dumelle, Matt Higham, Erin E Peterson, and\nDaniel J Isaak. 2023. ‚ÄúIndexing and Partitioning the Spatial\nLinear Model for Large Data Sets.‚Äù arXiv Preprint\narXiv:2305.07811.\n\n\nVer Hoef, Jay M, Erin E Peterson, Mevin B Hooten, Ephraim M Hanks, and\nMarie-Jos√®e Fortin. 2018. ‚ÄúSpatial Autoregressive Models for\nStatistical Inference from Ecological Data.‚Äù Ecological\nMonographs 88 (1): 36‚Äì59."
  }
]