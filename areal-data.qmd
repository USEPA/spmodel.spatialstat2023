# Areal Data {#sec-spautor}

```{r source_r}
#| echo: false
source("_common.R")
```

Throughout this section, we will use both the `spmodel` package and the `ggplot2` package:

```{r}
library(spmodel)
library(ggplot2)
```

__Goals__:

* Use the `spautor()` function in `spmodel` to fit a spatial linear model to areal data.
* Connect parameter estimates in the summary output of `spautor()` to the spatial linear model introduced in @eq-splm in @sec-basics.
* Apply some of the other functions introduced in @sec-model-fitting to a model object fit with `spautor()`.
* Use the `spgautor()` function in `spmodel` to fit a spatial generalized linear model to areal data.

## Data Introduction

Throughout the section, we will use the `seal` data in the `spmodel` package. The `seal` data is an `sf` object with a `POLYGON` geometry. There are 62 polygons in the data, some of which have non-missing values of `log_trend`, which is the log of the estimated harbor-seal trends that were calculated from abundance data.

The following code generates a visualization of the `seal` data: polygons that are grey have a missing value for `log_trend`.

```{r}
ggplot(seal, aes(fill = log_trend)) +
  geom_sf() +
  scale_fill_viridis_c() +
  theme_bw(base_size = 14) 
```

Our goal is to fit a spatial autoregressive model (@eq-splm and @eq-Rareal) to the `log_trend` response variable with the `spautor()` function. Then, we will use the fitted model to predict the `log_trend` for sites where `log_trend` is not recorded.

## `spautor()` Syntax and Output Interpretation

The syntax for fitting a model to areal data with `spautor()` is very similar to that used for `splm()`. Again, there are generally at least three required arguments:

* `formula`: a formula that describes the relationship between the response variable ($\mathbf{y}$) and explanatory variables ($\mathbf{X}$)
    * `formula` in `spautor()` is the same as `formula` in `lm()` and `splm()`
* `data`: a `data.frame` or `sf` object that contains the response variable, explanatory variables, and spatial information. Note that if `data` is a `data.frame`, then `W` is an additional required argument to `spautor()`.
* `spcov_type`: the spatial covariance type (`"car"` or `"sar"`)

We can fit a conditional auto-regressive (CAR) model with

```{r}
sealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = "car")
summary(sealmod)
```

```{r spatparms}
#| echo: false
spcov_params_car <- coef(sealmod, type = "spcov")
de_car <- as.vector(round(spcov_params_car[["de"]], digits = 3))
range_car <- as.vector(round(spcov_params_car[["range"]], digits = 3))
```

We can relate some of the components in the summary output to the model in @eq-splm and @eq-Rareal: 

* the value in the `Estimate` column of the `Coefficients (fixed)` table form $\boldsymbol{\hat{\beta}}$, an estimate of $\boldsymbol{\beta}$. 
* the `de` value of `r de_car` in the `Coefficients (car spatial covariance)` table is $\hat{\sigma}^2_{de}$, which is an estimate of $\sigma^2_{de}$, the variance of $\boldsymbol{\tau}$. 
* the `range` value of `r range_car` in the `Coefficients (car spatial covariance)` table is $\hat{\phi}$, an estimate of $\phi$ in @eq-Rareal.

::: {.callout-note}
## Note

By default, $\sigma^2_{ie}$ is assumed to be `0` for autoregressive models and hence, `ie` is omitted from the summary output. 
:::

Though the weight matrix $\mathbf{W}$ in @eq-Rareal used in the model does not appear in the summary output, we can pull the weight matrix from the `sealmod` object with

```{r}
#| results: false
sealmod$W
```

By default, `spautor()` uses __queen contiguity__ to form the weight matrix: observations are "neighbors" if they share at least one boundary (even if that boundary is a single point). Recall that observations are not considered neighbors with themselves. Also by default, `spautor()` row standardizes the weight matrix so that each of the rows in $\mathbf{W}$ sum to $1$. Row standardization of the weight matrix is performed by default because doing so results in "nice" properties of the resulting covariance matrix [@ver2018spatial]. The first row of the weight matrix is 

```{r}
sealmod$W[1, ]
```

The output indicates that the first observation is neighbors with the second observation, the sixteenth observation, and the twenty-eighth observation. 

Finally, if we re-examine $\mathbf{W}$, we can note that some rows of $\mathbf{W}$ do not have any positive values, indicating that some observations in the data have no neighbors. Looking back on the plot of the data, we see that there are indeed a few "island" sites that do not share a boundary with any other polygons. The errors for these spatial locations are assumed to be uncorrelated with all other random errors, and, they are given a unique variance parameter that is the `extra` spatial covariance estimate in the summary output of the model.

## Additional Analysis

Most of the helper functions for models fit with `splm()` are also useful for models fit with `spautor()`. Additionally, most of the additional arguments for `splm()` are also additional arguments for `spautor()`. 

Of the functions mentioned in @sec-model-fitting, the following are also available to use on a model fit with `spautor()`:

* `augment()`, `glance()`, and `glances()`
* model fit statistics with `AIC()`, `AICc()` and `GR2()`
* model diagnostics statistics with `cooks.distance()`, `residuals()`, `fitted()`, etc.

Of the arguments mentioned in @sec-model-fitting, `spcov_initial` and `random` are available for `spautor()`.

::: {.callout-note}
## Note

The `anisotropy` argument is not available for `spautor()` because the covariance for an autoregressive model is based on the neighborhood structure of the spatial locations, not on distance.
:::


::: {.callout-important icon="false"}
## Exercise

Choose a couple of the helper functions that you would like to explore and apply those functions to the fitted seal model.

:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
AIC(sealmod)
fitted(sealmod)
```

:::

## Prediction with Areal Data

Prediction of response values for unobserved polygons with areal data requires that the polygons with missing response values be included in the `data` argument supplied to `spautor()`. The reason for this requirement is that exclusion of these polygons changes the underlying neighborhood structure of the data, and, therefore changes the covariance matrix.

For areal data, we can obtain predictions for unobserved polygons using `predict()` on the fitted model object or `augment()` on the fitted model object, specifying the `newdata` argument to be `mod$newdata`. Both approaches are given below:

```{r}
#| results: false
sealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = "car")
summary(sealmod)

predict(sealmod)
```

```{r}
augment(sealmod, newdata = sealmod$newdata)
```

::: {.callout-note}
## Note

The `mod$newdata` syntax also works for models fit with `splm()`, where the `data` used contains missing values for the response variable at any unobserved locations.
:::


::: {.callout-important icon="false"}
## Exercise

Verify that the fitted autoregressive model with the `seal` data changes when the polygons with missing response values are excluded from the `data` argument in `spautor()`. The following code creates a data without the polygons with missing values:

```{r}
is_missing <- is.na(seal$log_trend)
seal_nomiss <- seal[!is_missing, , ]
```

:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
sealmod_nomiss <- spautor(log_trend ~ 1,
                          data = seal_nomiss, spcov_type = "car")
print(sealmod)
print(sealmod_nomiss)
```

:::

## Spatial Generalized Autoregressive Mdoels

In @sec-spglm we discussed how to formulate spatial generalized linear models using `spglm()`, building off the construction of spatial linear models fit using `splm()`. Similarly, we can formulate spatial generalized autoregressive models using `spgautor()`, building off the construction of spatial autoregressive models fit using `spautor()`. Spatial generalized autoregressive models can be fit to binomial, proportion, count, and skewed data by providing the `family` argument, as with the models fit using `spglm()` in @sec-spglm. For example, we model `exp(log_trend)` (which is strictly positive) as a gamma random variable with the simultaneous autoregressive spatial covariance by running
```{r}
sealgmod <- spgautor(exp(log_trend) ~ 1, family = Gamma,
                  data = seal, spcov_type = "sar")
summary(sealgmod)
```

## R Code Appendix

```{r get-labels, echo = FALSE}
labs = knitr::all_labels()
labs = setdiff(labs, c("source_r", "get-labels"))
```

```{r all-code, ref.label=labs, eval = FALSE}
```
