# Additional Modeling Features {#sec-features}

```{r source_r, echo = FALSE}
source("_common.R")
```

Throughout this section, we will use both the `spmodel` package and the `ggplot2` package:

```{r}
library(spmodel)
library(ggplot2)
```

We will continue to use the `moss` data throughout this section.

__Goals__: 

* Incorporate additional arguments to `splm()` to:
    * Fit and predict for multiple models simultaneously.
    * Fit a spatial linear model with non-spatial random effects.
    * Fit a spatial linear model with anisotropy.
    * Fit a spatial linear model with a partition factor.
    * Fix certain spatial covariance parameters at known values.
    * Fit a random forest spatial residual linear model and make predictions.

## Multiple Models

`splm()` fits multiple models simultaneously when `spcov_type` is a vector with more than one element:

```{r}
spmods <- splm(formula = log_Zn ~ log_dist2road, data = moss,
              spcov_type = c("exponential", "gaussian"))
```

`spmods` is a list with two elements: `exponential`, using the exponential spatial covariance; and `gaussian`, using the Gaussian spatial covariance.

```{r}
names(spmods)
```

`spmods` is natural to combine with `glances()` to glance at each model fit:

```{r}
glances(spmods)
```

and to combine with `predict()` to predict for each model fit.

::: {.callout-important icon="false"}
## Exercise
Work with a neighbor to find 90% confidence intervals for the fixed effects in the Gaussian model using either (1) `tidy()` or (2) `confint()`. Before beginning, decide with your neighbor who will begin working on (1) `tidy()` and who will begin working on (2) `confint()`.
:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
tidy(spmods$gaussian, conf.int = TRUE, conf.level = 0.90)
confint(spmods$gaussian, level = 0.90)
```
:::

## Non-Spatial Random Effects

In the `moss` data, there are actually some spatial locations that have more than one measurement due to multiple samples being collected at a single location or due to a single sample being tested multiple times in the laboratory. The `sample` variable indexes the spatial location:

```{r}
moss
```

We might expect Zinc concentration to be correlated within a spatial location; therefore, we might want to add `sample` as a non-spatial random effect (here, an intercept random effect) to the model with `log_Zn` as the response and `log_dist2road` as the predictor. The `splm()` function allows non-spatial random effects to be incorporated with the `random` argument, which takes a formula specification that is similar in syntax as the `nlme` [@pinheiro2006mixed] and `lme4` [@bates2015lme4] \textbf{\textsf{R}} packages.

```{r}
randint <- splm(log_Zn ~ log_dist2road,
                data = moss, spcov_type = "exponential",
                random = ~ (1 | sample))
```

:::{.callout-tip}
For the `randint` model, in the `random` argument, `sample` is shorthand for `(1 | sample)`. So the `randint` model could be written more concisely as

```{r}
randint <- splm(log_Zn ~ log_dist2road,
                      data = moss, spcov_type = "exponential",
                      random = ~ sample)
```

:::

The summary output now shows an estimate of the variance of the random intercepts, in addition to the estimated fixed effects and estimated spatial covariance parameters.

```{r}
summary(randint)
```

And, `glances()` shows that the model with the random intercepts is a better fit to the data than the model without random intercepts. 

```{r}
spmod <- splm(log_Zn ~ log_dist2road,
              data = moss, spcov_type = "exponential")
glances(spmod, randint)
```

As another example, we might consider a model that also has random intercepts for `year`, or, a model that also has both random intercepts for `year` and random slopes for `log_dist2road` within `year`:

```{r}
yearint <- splm(log_Zn ~ log_dist2road,
                      data = moss, spcov_type = "exponential",
                      random = ~ (1 | sample + year))
yearsl <- splm(log_Zn ~ log_dist2road,
                      data = moss, spcov_type = "exponential",
                      random = ~ (1 | sample) + 
                       (log_dist2road | year))
```

`glances()` shows that, of these four models, the model that includes random intercepts for `sample`, random intercepts for `year`, and random slopes for `year` is best, according to the AIC and AICc metrics.

```{r}
glances(spmod, randint, yearint, yearsl)
```

::: {.callout-note}
## Note

The syntax `~ (log_dist2road | year)` specifies that both random intercepts for `year` and random slopes for `log_dist2road` within `year` should be included in the model. If only random slopes are desired, then we should set `random` to `~ (-1 + log_dist2road | year)`.
:::

::: {.callout-important icon="false"}
## Exercise

Perhaps a model with random intercepts for `sample` and random intercepts and slopes for `year` but without any spatial covariance is an even better fit to the data. Fit such a model by specifying `spcov_type` to be `"none"`. Then, use `glances()` to see how well this non-spatial model fits the `moss` data compared to the spatially explicit models.
:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
nospcov <- splm(log_Zn ~ log_dist2road,
                    data = moss, spcov_type = "none",
                    random = ~ (1 | sample) + 
                      (log_dist2road | year))
glances(spmod, randint, yearint, yearsl, nospcov)
## the model with no explicit spatial covariance has the worst fit 
## of the five models.
```
:::

## Anisotropy

By default, `splm()` uses isotropic spatial covariance. Spatial covariance is isotropic if it behaves similarly in all directions. A spatial covariance is (geometrically) anisotropic if it does not behave similarly in all directions. Anisotropic models require estimation of two additional parameters: `rotate` and `scale`, which control the behavior of the spatial covariance as a function of distance and direction. 

```{r}
aniso <- splm(log_Zn ~ log_dist2road,
              data = moss, spcov_type = "exponential",
              anisotropy = TRUE)
aniso
```

We can again use glances to compare the model that allows for anisotropy with the isotropic model:

```{r}
glances(spmod, aniso)
```

The anisotropic model does have lower AIC and AICc than the isotropic model, indicating a better fit. However, the reduction in AIC and AICc is quite small, so we may still prefer the isotropic model for simplicity and interpretability.

::: {.callout-important icon="false"}
## Exercise

Visualize the anisotropic level curve for `aniso` using `plot()`. Hint: Run `?plot.spmodel` or visit [this link](https://usepa.github.io/spmodel/reference/plot.spmodel.html). Which direction does the model predict two responses will be more correlated?

:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
plot(aniso, which = 8)
```

A clockwise rotation of this level curve by `rotate` followed by a scaling of the minor axis by the reciprocal of `scale` yields a spatial covariance that is isotropic.

:::

## Partition Factors

A partition factor is a categorical (or factor) variable that forces observations in different levels of the partition factor to be uncorrelated. The `year` variable in `moss` has two levels, `2001` and `2006`, which correspond to the year of measurement. Suppose the goal is to fit a model that assumes observations from the same year are spatially correlated but observations from different years are not spatially correlated. In this context, `year` is a partition factor. We fit this model by running

```{r}
part <- splm(log_Zn ~ log_dist2road,
             data = moss, spcov_type = "exponential",
             partition_factor = ~ year)
```

Like the `formula` and `random` arguments, the `partition_factor` argument requires a formula object.



## Fixing Covariance Parameters

By default, `splm()` estimates all unknown covariance parameters. However, we can also fix covariance parameters at known values with the `spcov_initial` argument for spatial covariance parameters and with the `randcov_initial` argument for non-spatial covariance parameters.

As an example, suppose that we want to fit a `"spherical"` covariance model to the moss data, but that, we want to fix the `range` at `20000` units so that errors from spatial locations more than 20000 units apart are not spatially correlated. We first create an `spcov_initial` object with the `spcov_initial()` function:

```{r}
init_spher <- spcov_initial("spherical", range = 20000, known = "range")
init_spher
```

Within the function call, we specify that, for a `"spherical"` covariance, we would like to set the `range` parameter to `20000` and for that value to be known and therefore fixed in any subsequent estimation. We then provide `init_spher` as an argument to `spcov_initial` in `splm()`:

```{r}
splm(log_Zn ~ log_dist2road, data = moss,
     spcov_initial = init_spher)
```

When `spcov_initial` is provided, `spcov_type` is not a necessary argument to `splm()`.

::: {.callout-important icon="false"}
## Exercise

Fit a `"spherical"` spatial covariance model to the `moss` data set without a nugget effect (i.e., the model should have the `ie` independent variance parameter set to `0` and treated as `known`). Verify in the summary output that the `ie` is indeed `0` for this model.

:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
init_no_ie <- spcov_initial("spherical", ie = 0, known = "ie")
no_ie <- splm(log_Zn ~ log_dist2road, data = moss,
              spcov_initial = init_no_ie)
summary(no_ie)
```

:::

## Random Forest Spatial Residual Models

Random forests are a popular machine-learning modeling tool. The random forest spatial residual model available in `spmodel` combines random forest modeling and spatial linear models. First, the model is fit using random forests and fitted values are obtained. Then the response residuals are used to fit a spatial linear model. Predictions at unobserved locations are computed as the sum of the random forest prediction and the predicted (i.e., Kriged) response residual from the spatial linear model. Suppose we split the `moss` data into training and test data sets, with the goal of predicting `log_Zn` in the test data. 

```{r}
set.seed(1)
n <- NROW(moss)
n_train <- round(0.75 * n)
n_test <- n - n_train
train_index <- sample(n, size = n_train)
moss_train <- moss[train_index, , ]
moss_test <- moss[-train_index, , ]
```

We fit a random forest spatial residual model to the test data by running
```{r}
rfsrmod <- splmRF(log_Zn ~ log_dist2road, moss_train,
                  spcov_type = "exponential")
```

We make predictions for the test data by running
```{r}
#| results: hide

# results omitted
predict(rfsrmod, moss_test)
```

::: {.callout-important icon="false"}
## Exercise

Use `predict()` to store the random forest spatial residual predictions of `log_Zn` at locations in the test data and then compute the mean-squared prediction error.

:::

::: {.callout-important icon="false" collapse="true"}
## Exercise Solution

```{r}
preds <- predict(rfsrmod, newdata = moss_test)
errors <- moss_test$log_Zn - preds
mean(errors^2)
```

:::

## R Code Appendix

```{r get-labels, echo = FALSE}
labs = knitr::all_labels()
labs = setdiff(labs, c("source_r", "get-labels"))
```

```{r all-code, ref.label=labs, eval = FALSE}
```
